// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinionServiceClient is the client API for MinionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinionServiceClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetScoreTask(ctx context.Context, in *GetScoreTaskRequest, opts ...grpc.CallOption) (*GetScoreTaskResponse, error)
	SubmitScoreTask(ctx context.Context, in *SubmitScoreTaskRequest, opts ...grpc.CallOption) (*SubmitScoreTaskResponse, error)
}

type minionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinionServiceClient(cc grpc.ClientConnInterface) MinionServiceClient {
	return &minionServiceClient{cc}
}

func (c *minionServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/proto.MinionService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionServiceClient) GetScoreTask(ctx context.Context, in *GetScoreTaskRequest, opts ...grpc.CallOption) (*GetScoreTaskResponse, error) {
	out := new(GetScoreTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.MinionService/GetScoreTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionServiceClient) SubmitScoreTask(ctx context.Context, in *SubmitScoreTaskRequest, opts ...grpc.CallOption) (*SubmitScoreTaskResponse, error) {
	out := new(SubmitScoreTaskResponse)
	err := c.cc.Invoke(ctx, "/proto.MinionService/SubmitScoreTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinionServiceServer is the server API for MinionService service.
// All implementations must embed UnimplementedMinionServiceServer
// for forward compatibility
type MinionServiceServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetScoreTask(context.Context, *GetScoreTaskRequest) (*GetScoreTaskResponse, error)
	SubmitScoreTask(context.Context, *SubmitScoreTaskRequest) (*SubmitScoreTaskResponse, error)
	mustEmbedUnimplementedMinionServiceServer()
}

// UnimplementedMinionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMinionServiceServer struct {
}

func (UnimplementedMinionServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedMinionServiceServer) GetScoreTask(context.Context, *GetScoreTaskRequest) (*GetScoreTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScoreTask not implemented")
}
func (UnimplementedMinionServiceServer) SubmitScoreTask(context.Context, *SubmitScoreTaskRequest) (*SubmitScoreTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitScoreTask not implemented")
}
func (UnimplementedMinionServiceServer) mustEmbedUnimplementedMinionServiceServer() {}

// UnsafeMinionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinionServiceServer will
// result in compilation errors.
type UnsafeMinionServiceServer interface {
	mustEmbedUnimplementedMinionServiceServer()
}

func RegisterMinionServiceServer(s grpc.ServiceRegistrar, srv MinionServiceServer) {
	s.RegisterService(&MinionService_ServiceDesc, srv)
}

func _MinionService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinionService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinionService_GetScoreTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).GetScoreTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinionService/GetScoreTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).GetScoreTask(ctx, req.(*GetScoreTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinionService_SubmitScoreTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitScoreTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).SubmitScoreTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinionService/SubmitScoreTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).SubmitScoreTask(ctx, req.(*SubmitScoreTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinionService_ServiceDesc is the grpc.ServiceDesc for MinionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MinionService",
	HandlerType: (*MinionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _MinionService_Heartbeat_Handler,
		},
		{
			MethodName: "GetScoreTask",
			Handler:    _MinionService_GetScoreTask_Handler,
		},
		{
			MethodName: "SubmitScoreTask",
			Handler:    _MinionService_SubmitScoreTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
