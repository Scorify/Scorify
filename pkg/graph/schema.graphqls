scalar JSON
scalar Time
scalar Upload

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [Role]) on FIELD_DEFINITION

enum Role {
  admin
  user
}

enum StatusEnum {
  up
  down
  unknown
}

enum NotificationType {
  default
  error
  info
  success
  warning
}

enum EngineState {
  paused
  waiting
  running
  stopping
}

type LoginOutput {
  name: String!
  token: String!
  expires: Int!
  path: String!
  domain: String!
  secure: Boolean!
  httpOnly: Boolean!
}

type User {
  id: ID!
  username: String!
  role: Role!
  number: Int
  create_time: Time!
  update_time: Time!
  configs: [Config!]! @isAuthenticated
  statuses: [Status!]! @isAuthenticated
  koth_statuses: [KothStatus!]! @isAuthenticated
  score_caches: [ScoreCache!]! @isAuthenticated
  inject_submissions: [InjectSubmission!]! @isAuthenticated
}

enum SchemaFieldType {
  string
  int
  bool
}

type SchemaField {
  name: String!
  type: SchemaFieldType!
  default: String
  enum: [String!]
}

type Source {
  name: String!
  schema: [SchemaField!]!
}

type CheckConfig {
  id: ID!
  config: JSON!
  create_time: Time!
  update_time: Time!
  check_id: ID!
  user_id: ID!
  check: Check!
  user: User!
}

type Check {
  id: ID!
  name: String!
  source: Source!
  weight: Int!
  config: JSON! @hasRole(roles: [admin])
  editable_fields: [String!]! @hasRole(roles: [admin])
  create_time: Time!
  update_time: Time!
  configs: [CheckConfig!]!
  statuses: [Status!]!
}

type Config {
  id: ID!
  config: JSON!
  check: Check!
  user: User!
}

type Status {
  id: ID!
  error: String
  status: StatusEnum!
  points: Int!
  check_id: ID!
  round_id: ID!
  user_id: ID!
  create_time: Time!
  update_time: Time!
  check: Check!
  round: Round!
  user: User!
  minion: Minion
}

input StatusesQueryInput {
  from_time: Time
  to_time: Time
  from_round: Int
  to_round: Int
  minions: [ID!]
  checks: [ID!]
  users: [ID!]
  statuses: [StatusEnum!]
  limit: Int
  offset: Int
}

input AuditLogQueryInput {
  from_time: Time
  to_time: Time
  actions: [AuditAction!]
  message: String
  ip: String
  users: [ID!]
  limit: Int
  offset: Int
}

type MinionMetrics {
  minion_id: ID!
  timestamp: Time!
  memory_usage: Int!
  memory_total: Int!
  cpu_usage: Float!
  goroutines: Int!
  minion: Minion!
}

enum MinionRole {
  service
  koth
}

type Minion {
  id: ID!
  name: String!
  ip: String!
  create_time: Time!
  update_time: Time!
  statuses: [Status!]!
  koth_statuses: [KothStatus!]!
  metrics: MinionMetrics
  deactivated: Boolean!
  role: MinionRole!
}

type ScoreCache {
  id: ID!
  points: Int!
  round_id: ID!
  user_id: ID!
  create_time: Time!
  update_time: Time!
  round: Round!
  user: User!
}

type Round {
  id: ID!
  number: Int!
  complete: Boolean!
  create_time: Time!
  update_time: Time!
  statuses: [Status!]!
  koth_statuses: [KothStatus!]!
  score_caches: [ScoreCache!]!
}

type File {
  id: ID!
  name: String!
  url: String!
}

type RubricTemplateField {
  name: String!
  max_score: Int!
}

input RubricTemplateFieldInput {
  name: String!
  max_score: Int!
}

type RubricTemplate {
  fields: [RubricTemplateField!]!
  max_score: Int!
}

input RubricTemplateInput {
  fields: [RubricTemplateFieldInput!]!
  max_score: Int!
}

type RubricField {
  name: String!
  score: Int!
  notes: String
}

input RubricFieldInput {
  name: String!
  score: Int!
  notes: String
}

type Rubric {
  fields: [RubricField!]!
  notes: String
}

input RubricInput {
  fields: [RubricFieldInput!]!
  notes: String
}

type Inject {
  id: ID!
  title: String!
  start_time: Time!
  end_time: Time!
  create_time: Time!
  update_time: Time!
  files: [File!]!
  submissions: [InjectSubmission!]!
  rubric: RubricTemplate!
}

type InjectSubmission {
  id: ID!
  create_time: Time!
  update_time: Time!
  files: [File!]!
  inject_id: ID!
  user_id: ID!
  user: User!
  inject: Inject!
  rubric: Rubric
  graded: Boolean!
  notes: String!
}

type Notification {
  message: String!
  type: NotificationType!
}

type Score {
  user: User!
  score: Int!
}

type Scoreboard {
  teams: [User!]!
  checks: [Check!]!
  round: Round!
  statuses: [[Status]!]!
  scores: [Score]!
}

type KothCheckScore {
  id: ID!
  name: String!
  user: User
  host: String
  error: String
  update_time: Time!
  create_time: Time!
}

type KothScoreboard {
  round: Round!
  checks: [KothCheckScore!]!
  scores: [Score]!
}

type InjectSubmissionByUser {
  user: User!
  submissions: [InjectSubmission!]!
}

type MinionStatusSummary {
  total: Int!
  up: Int!
  down: Int!
  unknown: Int!
}

enum AuditAction {
  auth_login
  auth_logout
  auth_failed_login
  admin_login
  admin_become
  user_change_password
  user_create
  user_update
  user_delete
  check_create
  check_update
  check_delete
  check_validate
  check_config
  koth_check_create
  koth_check_update
  koth_check_delete
  notification_create
  engine_start
  engine_stop
  inject_create
  inject_update
  inject_delete
  inject_submit
  inject_grade
  minion_register
  minion_deactivate
  minion_activate
  wipe_all
  wipe_check_configs
  wipe_inject_submissions
  wipe_statuses
  wipe_scores
  wipe_rounds
  wipe_cache
}

type AuditLog {
  id: ID!
  action: AuditAction!
  message: String!
  ip: String!
  timestamp: Time!
  user_id: ID
  user: User
}

type AuditLogInput {
  from_time: Time
  to_time: Time
  actions: [AuditAction!]
  message: String
  ip: String
  users: [ID!]
}

type KothStatus {
  id: ID!
  points: Int!
  round_id: ID!
  check_id: ID!
  user_id: ID
  minion_id: ID
  round: Round!
  check: KothCheck!
  user: User
  minion: Minion
}

type KothCheck {
  id: ID!
  name: String!
  create_time: Time!
  update_time: Time!
  weight: Int! @hasRole(roles: [admin])
  file: String! @hasRole(roles: [admin])
  host: String! @hasRole(roles: [admin])
  topic: String! @hasRole(roles: [admin])
  statuses: [KothStatus!]! @hasRole(roles: [admin])
}

type Subscription {
  globalNotification: Notification!
  engineState: EngineState!
  scoreboardUpdate: Scoreboard!
  kothScoreboardUpdate: KothScoreboard!
  minionUpdate: MinionMetrics!
  latestRound: Round!
}

type Query {
  me: User
  users: [User!]! @hasRole(roles: [admin])
  teams: [User!]!

  sources: [Source!]!
  source(name: String!): Source!

  checks: [Check!]! @hasRole(roles: [admin])
  check(id: ID, name: String): Check!

  kothChecks: [KothCheck!]! @hasRole(roles: [admin])
  kothCheck(id: ID, name: String): KothCheck!

  configs: [Config!]! @isAuthenticated
  config(id: ID!): Config! @isAuthenticated

  scoreboard(round: Int): Scoreboard!
  kothScoreboard(round: Int): KothScoreboard!

  injects: [Inject!]!
  inject(id: ID!): Inject!
  injectSubmissions: [InjectSubmission!]! @isAuthenticated
  injectSubmission(id: ID!): InjectSubmission! @isAuthenticated
  injectSubmissionsByUser(id: ID!): [InjectSubmissionByUser!]!
    @hasRole(roles: [admin])

  minions: [Minion!]!

  statuses(query: StatusesQueryInput!): [Status!]! @isAuthenticated
  minionStatusSummary(minion_id: ID!): MinionStatusSummary! @isAuthenticated
}

type Mutation {
  login(username: String!, password: String!): LoginOutput!
  logout: Boolean! @isAuthenticated
  adminLogin(id: ID!): LoginOutput! @hasRole(roles: [admin])
  adminBecome(id: ID!): LoginOutput! @hasRole(roles: [admin])
  changePassword(oldPassword: String!, newPassword: String!): Boolean!
    @isAuthenticated
  statuses(query: StatusesQueryInput!): [Status!]! @isAuthenticated
  auditLog(query: AuditLogQueryInput!): [AuditLog!]! @hasRole(roles: [admin])

  createCheck(
    name: String!
    source: String!
    weight: Int!
    config: JSON!
    editable_fields: [String!]!
  ): Check! @hasRole(roles: [admin])
  updateCheck(
    id: ID!
    name: String
    weight: Int
    config: JSON
    editable_fields: [String!]
  ): Check! @hasRole(roles: [admin])
  deleteCheck(id: ID!): Boolean! @hasRole(roles: [admin])
  validateCheck(source: String!, config: String!): Boolean!
    @hasRole(roles: [admin])

  createKothCheck(
    name: String!
    weight: Int!
    host: String!
    file: String!
    topic: String!
  ): KothCheck! @hasRole(roles: [admin])
  updateKothCheck(
    id: ID!
    name: String
    weight: Int
    host: String
    file: String
    topic: String
  ): KothCheck! @hasRole(roles: [admin])
  deleteKothCheck(id: ID!): Boolean! @hasRole(roles: [admin])

  createUser(
    username: String!
    password: String!
    role: Role!
    number: Int
  ): User! @hasRole(roles: [admin])
  updateUser(id: ID!, username: String, password: String, number: Int): User!
    @hasRole(roles: [admin])
  deleteUser(id: ID!): Boolean! @hasRole(roles: [admin])

  editConfig(id: ID!, config: JSON!): Config! @isAuthenticated

  sendGlobalNotification(message: String!, type: NotificationType!): Boolean!
    @hasRole(roles: [admin])

  startEngine: Boolean! @hasRole(roles: [admin])
  stopEngine: Boolean! @hasRole(roles: [admin])

  createInject(
    title: String!
    start_time: Time!
    end_time: Time!
    files: [Upload!]!
    rubric: RubricTemplateInput!
  ): Inject! @hasRole(roles: [admin])
  updateInject(
    id: ID!
    title: String
    start_time: Time
    end_time: Time
    delete_files: [ID!]
    add_files: [Upload!]
    rubric: RubricTemplateInput
  ): Inject! @hasRole(roles: [admin])
  deleteInject(id: ID!): Boolean! @hasRole(roles: [admin])

  submitInject(
    injectID: ID!
    notes: String!
    files: [Upload!]!
  ): InjectSubmission! @hasRole(roles: [user])

  gradeSubmission(submissionID: ID!, rubric: RubricInput!): InjectSubmission!
    @hasRole(roles: [admin])

  updateMinion(id: ID!, name: String, deactivated: Boolean): Minion!
    @hasRole(roles: [admin])

  wipeDatabase(
    deleteUserCheckConfigurations: Boolean!
    deleteInjectSubmissions: Boolean!
    deleteStatusesScoresAndRounds: Boolean!
    deleteCachedData: Boolean!
  ): Boolean! @hasRole(roles: [admin])
}
