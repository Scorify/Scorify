// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/inject"
	"github.com/scorify/scorify/pkg/structs"
)

// Inject is the model entity for the Inject schema.
type Inject struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of an inject
	ID uuid.UUID `json:"id"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The title of the inject
	Title string `json:"title"`
	// The start time of the inject
	StartTime time.Time `json:"start_time"`
	// The end time of the inject
	EndTime time.Time `json:"end_time"`
	// The files of the inject
	Files []structs.File `json:"files"`
	// The rubric of the inject
	Rubric structs.RubricTemplate `json:"rubric"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InjectQuery when eager-loading is set.
	Edges        InjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InjectEdges holds the relations/edges for other nodes in the graph.
type InjectEdges struct {
	// The submissions of the inject
	Submissions []*InjectSubmission `json:"submissions"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading.
func (e InjectEdges) SubmissionsOrErr() ([]*InjectSubmission, error) {
	if e.loadedTypes[0] {
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inject) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inject.FieldFiles, inject.FieldRubric:
			values[i] = new([]byte)
		case inject.FieldTitle:
			values[i] = new(sql.NullString)
		case inject.FieldCreateTime, inject.FieldUpdateTime, inject.FieldStartTime, inject.FieldEndTime:
			values[i] = new(sql.NullTime)
		case inject.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inject fields.
func (i *Inject) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inject.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case inject.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case inject.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case inject.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case inject.FieldStartTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[j])
			} else if value.Valid {
				i.StartTime = value.Time
			}
		case inject.FieldEndTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[j])
			} else if value.Valid {
				i.EndTime = value.Time
			}
		case inject.FieldFiles:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field files", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Files); err != nil {
					return fmt.Errorf("unmarshal field files: %w", err)
				}
			}
		case inject.FieldRubric:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rubric", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Rubric); err != nil {
					return fmt.Errorf("unmarshal field rubric: %w", err)
				}
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inject.
// This includes values selected through modifiers, order, etc.
func (i *Inject) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QuerySubmissions queries the "submissions" edge of the Inject entity.
func (i *Inject) QuerySubmissions() *InjectSubmissionQuery {
	return NewInjectClient(i.config).QuerySubmissions(i)
}

// Update returns a builder for updating this Inject.
// Note that you need to call Inject.Unwrap() before calling this method if this Inject
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inject) Update() *InjectUpdateOne {
	return NewInjectClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inject entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inject) Unwrap() *Inject {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inject is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inject) String() string {
	var builder strings.Builder
	builder.WriteString("Inject(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("create_time=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(i.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(i.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("files=")
	builder.WriteString(fmt.Sprintf("%v", i.Files))
	builder.WriteString(", ")
	builder.WriteString("rubric=")
	builder.WriteString(fmt.Sprintf("%v", i.Rubric))
	builder.WriteByte(')')
	return builder.String()
}

// Injects is a parsable slice of Inject.
type Injects []*Inject
