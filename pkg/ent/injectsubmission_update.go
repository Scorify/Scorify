// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/scorify/scorify/pkg/ent/injectsubmission"
	"github.com/scorify/scorify/pkg/ent/predicate"
	"github.com/scorify/scorify/pkg/structs"
)

// InjectSubmissionUpdate is the builder for updating InjectSubmission entities.
type InjectSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *InjectSubmissionMutation
}

// Where appends a list predicates to the InjectSubmissionUpdate builder.
func (isu *InjectSubmissionUpdate) Where(ps ...predicate.InjectSubmission) *InjectSubmissionUpdate {
	isu.mutation.Where(ps...)
	return isu
}

// SetUpdateTime sets the "update_time" field.
func (isu *InjectSubmissionUpdate) SetUpdateTime(t time.Time) *InjectSubmissionUpdate {
	isu.mutation.SetUpdateTime(t)
	return isu
}

// SetFiles sets the "files" field.
func (isu *InjectSubmissionUpdate) SetFiles(s []structs.File) *InjectSubmissionUpdate {
	isu.mutation.SetFiles(s)
	return isu
}

// AppendFiles appends s to the "files" field.
func (isu *InjectSubmissionUpdate) AppendFiles(s []structs.File) *InjectSubmissionUpdate {
	isu.mutation.AppendFiles(s)
	return isu
}

// SetNotes sets the "notes" field.
func (isu *InjectSubmissionUpdate) SetNotes(s string) *InjectSubmissionUpdate {
	isu.mutation.SetNotes(s)
	return isu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (isu *InjectSubmissionUpdate) SetNillableNotes(s *string) *InjectSubmissionUpdate {
	if s != nil {
		isu.SetNotes(*s)
	}
	return isu
}

// SetRubric sets the "rubric" field.
func (isu *InjectSubmissionUpdate) SetRubric(s *structs.Rubric) *InjectSubmissionUpdate {
	isu.mutation.SetRubric(s)
	return isu
}

// ClearRubric clears the value of the "rubric" field.
func (isu *InjectSubmissionUpdate) ClearRubric() *InjectSubmissionUpdate {
	isu.mutation.ClearRubric()
	return isu
}

// SetGraded sets the "graded" field.
func (isu *InjectSubmissionUpdate) SetGraded(b bool) *InjectSubmissionUpdate {
	isu.mutation.SetGraded(b)
	return isu
}

// SetNillableGraded sets the "graded" field if the given value is not nil.
func (isu *InjectSubmissionUpdate) SetNillableGraded(b *bool) *InjectSubmissionUpdate {
	if b != nil {
		isu.SetGraded(*b)
	}
	return isu
}

// Mutation returns the InjectSubmissionMutation object of the builder.
func (isu *InjectSubmissionUpdate) Mutation() *InjectSubmissionMutation {
	return isu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (isu *InjectSubmissionUpdate) Save(ctx context.Context) (int, error) {
	isu.defaults()
	return withHooks(ctx, isu.sqlSave, isu.mutation, isu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isu *InjectSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := isu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (isu *InjectSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := isu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isu *InjectSubmissionUpdate) ExecX(ctx context.Context) {
	if err := isu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isu *InjectSubmissionUpdate) defaults() {
	if _, ok := isu.mutation.UpdateTime(); !ok {
		v := injectsubmission.UpdateDefaultUpdateTime()
		isu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isu *InjectSubmissionUpdate) check() error {
	if _, ok := isu.mutation.InjectID(); isu.mutation.InjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InjectSubmission.inject"`)
	}
	if _, ok := isu.mutation.UserID(); isu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InjectSubmission.user"`)
	}
	return nil
}

func (isu *InjectSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := isu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(injectsubmission.Table, injectsubmission.Columns, sqlgraph.NewFieldSpec(injectsubmission.FieldID, field.TypeUUID))
	if ps := isu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isu.mutation.UpdateTime(); ok {
		_spec.SetField(injectsubmission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := isu.mutation.Files(); ok {
		_spec.SetField(injectsubmission.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := isu.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, injectsubmission.FieldFiles, value)
		})
	}
	if value, ok := isu.mutation.Notes(); ok {
		_spec.SetField(injectsubmission.FieldNotes, field.TypeString, value)
	}
	if value, ok := isu.mutation.Rubric(); ok {
		_spec.SetField(injectsubmission.FieldRubric, field.TypeJSON, value)
	}
	if isu.mutation.RubricCleared() {
		_spec.ClearField(injectsubmission.FieldRubric, field.TypeJSON)
	}
	if value, ok := isu.mutation.Graded(); ok {
		_spec.SetField(injectsubmission.FieldGraded, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, isu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{injectsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	isu.mutation.done = true
	return n, nil
}

// InjectSubmissionUpdateOne is the builder for updating a single InjectSubmission entity.
type InjectSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InjectSubmissionMutation
}

// SetUpdateTime sets the "update_time" field.
func (isuo *InjectSubmissionUpdateOne) SetUpdateTime(t time.Time) *InjectSubmissionUpdateOne {
	isuo.mutation.SetUpdateTime(t)
	return isuo
}

// SetFiles sets the "files" field.
func (isuo *InjectSubmissionUpdateOne) SetFiles(s []structs.File) *InjectSubmissionUpdateOne {
	isuo.mutation.SetFiles(s)
	return isuo
}

// AppendFiles appends s to the "files" field.
func (isuo *InjectSubmissionUpdateOne) AppendFiles(s []structs.File) *InjectSubmissionUpdateOne {
	isuo.mutation.AppendFiles(s)
	return isuo
}

// SetNotes sets the "notes" field.
func (isuo *InjectSubmissionUpdateOne) SetNotes(s string) *InjectSubmissionUpdateOne {
	isuo.mutation.SetNotes(s)
	return isuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (isuo *InjectSubmissionUpdateOne) SetNillableNotes(s *string) *InjectSubmissionUpdateOne {
	if s != nil {
		isuo.SetNotes(*s)
	}
	return isuo
}

// SetRubric sets the "rubric" field.
func (isuo *InjectSubmissionUpdateOne) SetRubric(s *structs.Rubric) *InjectSubmissionUpdateOne {
	isuo.mutation.SetRubric(s)
	return isuo
}

// ClearRubric clears the value of the "rubric" field.
func (isuo *InjectSubmissionUpdateOne) ClearRubric() *InjectSubmissionUpdateOne {
	isuo.mutation.ClearRubric()
	return isuo
}

// SetGraded sets the "graded" field.
func (isuo *InjectSubmissionUpdateOne) SetGraded(b bool) *InjectSubmissionUpdateOne {
	isuo.mutation.SetGraded(b)
	return isuo
}

// SetNillableGraded sets the "graded" field if the given value is not nil.
func (isuo *InjectSubmissionUpdateOne) SetNillableGraded(b *bool) *InjectSubmissionUpdateOne {
	if b != nil {
		isuo.SetGraded(*b)
	}
	return isuo
}

// Mutation returns the InjectSubmissionMutation object of the builder.
func (isuo *InjectSubmissionUpdateOne) Mutation() *InjectSubmissionMutation {
	return isuo.mutation
}

// Where appends a list predicates to the InjectSubmissionUpdate builder.
func (isuo *InjectSubmissionUpdateOne) Where(ps ...predicate.InjectSubmission) *InjectSubmissionUpdateOne {
	isuo.mutation.Where(ps...)
	return isuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (isuo *InjectSubmissionUpdateOne) Select(field string, fields ...string) *InjectSubmissionUpdateOne {
	isuo.fields = append([]string{field}, fields...)
	return isuo
}

// Save executes the query and returns the updated InjectSubmission entity.
func (isuo *InjectSubmissionUpdateOne) Save(ctx context.Context) (*InjectSubmission, error) {
	isuo.defaults()
	return withHooks(ctx, isuo.sqlSave, isuo.mutation, isuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (isuo *InjectSubmissionUpdateOne) SaveX(ctx context.Context) *InjectSubmission {
	node, err := isuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (isuo *InjectSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := isuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isuo *InjectSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := isuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isuo *InjectSubmissionUpdateOne) defaults() {
	if _, ok := isuo.mutation.UpdateTime(); !ok {
		v := injectsubmission.UpdateDefaultUpdateTime()
		isuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isuo *InjectSubmissionUpdateOne) check() error {
	if _, ok := isuo.mutation.InjectID(); isuo.mutation.InjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InjectSubmission.inject"`)
	}
	if _, ok := isuo.mutation.UserID(); isuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "InjectSubmission.user"`)
	}
	return nil
}

func (isuo *InjectSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *InjectSubmission, err error) {
	if err := isuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(injectsubmission.Table, injectsubmission.Columns, sqlgraph.NewFieldSpec(injectsubmission.FieldID, field.TypeUUID))
	id, ok := isuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InjectSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := isuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, injectsubmission.FieldID)
		for _, f := range fields {
			if !injectsubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != injectsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := isuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := isuo.mutation.UpdateTime(); ok {
		_spec.SetField(injectsubmission.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := isuo.mutation.Files(); ok {
		_spec.SetField(injectsubmission.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := isuo.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, injectsubmission.FieldFiles, value)
		})
	}
	if value, ok := isuo.mutation.Notes(); ok {
		_spec.SetField(injectsubmission.FieldNotes, field.TypeString, value)
	}
	if value, ok := isuo.mutation.Rubric(); ok {
		_spec.SetField(injectsubmission.FieldRubric, field.TypeJSON, value)
	}
	if isuo.mutation.RubricCleared() {
		_spec.ClearField(injectsubmission.FieldRubric, field.TypeJSON)
	}
	if value, ok := isuo.mutation.Graded(); ok {
		_spec.SetField(injectsubmission.FieldGraded, field.TypeBool, value)
	}
	_node = &InjectSubmission{config: isuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, isuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{injectsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	isuo.mutation.done = true
	return _node, nil
}
