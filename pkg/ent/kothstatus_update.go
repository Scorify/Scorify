// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/predicate"
)

// KothStatusUpdate is the builder for updating KothStatus entities.
type KothStatusUpdate struct {
	config
	hooks    []Hook
	mutation *KothStatusMutation
}

// Where appends a list predicates to the KothStatusUpdate builder.
func (ksu *KothStatusUpdate) Where(ps ...predicate.KothStatus) *KothStatusUpdate {
	ksu.mutation.Where(ps...)
	return ksu
}

// SetUpdateTime sets the "update_time" field.
func (ksu *KothStatusUpdate) SetUpdateTime(t time.Time) *KothStatusUpdate {
	ksu.mutation.SetUpdateTime(t)
	return ksu
}

// Mutation returns the KothStatusMutation object of the builder.
func (ksu *KothStatusUpdate) Mutation() *KothStatusMutation {
	return ksu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ksu *KothStatusUpdate) Save(ctx context.Context) (int, error) {
	ksu.defaults()
	return withHooks(ctx, ksu.sqlSave, ksu.mutation, ksu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksu *KothStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := ksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ksu *KothStatusUpdate) Exec(ctx context.Context) error {
	_, err := ksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksu *KothStatusUpdate) ExecX(ctx context.Context) {
	if err := ksu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ksu *KothStatusUpdate) defaults() {
	if _, ok := ksu.mutation.UpdateTime(); !ok {
		v := kothstatus.UpdateDefaultUpdateTime()
		ksu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ksu *KothStatusUpdate) check() error {
	if _, ok := ksu.mutation.RoundID(); ksu.mutation.RoundCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KothStatus.round"`)
	}
	if _, ok := ksu.mutation.CheckID(); ksu.mutation.CheckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KothStatus.check"`)
	}
	return nil
}

func (ksu *KothStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ksu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(kothstatus.Table, kothstatus.Columns, sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID))
	if ps := ksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ksu.mutation.UpdateTime(); ok {
		_spec.SetField(kothstatus.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kothstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ksu.mutation.done = true
	return n, nil
}

// KothStatusUpdateOne is the builder for updating a single KothStatus entity.
type KothStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KothStatusMutation
}

// SetUpdateTime sets the "update_time" field.
func (ksuo *KothStatusUpdateOne) SetUpdateTime(t time.Time) *KothStatusUpdateOne {
	ksuo.mutation.SetUpdateTime(t)
	return ksuo
}

// Mutation returns the KothStatusMutation object of the builder.
func (ksuo *KothStatusUpdateOne) Mutation() *KothStatusMutation {
	return ksuo.mutation
}

// Where appends a list predicates to the KothStatusUpdate builder.
func (ksuo *KothStatusUpdateOne) Where(ps ...predicate.KothStatus) *KothStatusUpdateOne {
	ksuo.mutation.Where(ps...)
	return ksuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ksuo *KothStatusUpdateOne) Select(field string, fields ...string) *KothStatusUpdateOne {
	ksuo.fields = append([]string{field}, fields...)
	return ksuo
}

// Save executes the query and returns the updated KothStatus entity.
func (ksuo *KothStatusUpdateOne) Save(ctx context.Context) (*KothStatus, error) {
	ksuo.defaults()
	return withHooks(ctx, ksuo.sqlSave, ksuo.mutation, ksuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ksuo *KothStatusUpdateOne) SaveX(ctx context.Context) *KothStatus {
	node, err := ksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ksuo *KothStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := ksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksuo *KothStatusUpdateOne) ExecX(ctx context.Context) {
	if err := ksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ksuo *KothStatusUpdateOne) defaults() {
	if _, ok := ksuo.mutation.UpdateTime(); !ok {
		v := kothstatus.UpdateDefaultUpdateTime()
		ksuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ksuo *KothStatusUpdateOne) check() error {
	if _, ok := ksuo.mutation.RoundID(); ksuo.mutation.RoundCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KothStatus.round"`)
	}
	if _, ok := ksuo.mutation.CheckID(); ksuo.mutation.CheckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "KothStatus.check"`)
	}
	return nil
}

func (ksuo *KothStatusUpdateOne) sqlSave(ctx context.Context) (_node *KothStatus, err error) {
	if err := ksuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(kothstatus.Table, kothstatus.Columns, sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID))
	id, ok := ksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KothStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kothstatus.FieldID)
		for _, f := range fields {
			if !kothstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kothstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ksuo.mutation.UpdateTime(); ok {
		_spec.SetField(kothstatus.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &KothStatus{config: ksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kothstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ksuo.mutation.done = true
	return _node, nil
}
