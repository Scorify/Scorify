// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/predicate"
)

// KothStatusDelete is the builder for deleting a KothStatus entity.
type KothStatusDelete struct {
	config
	hooks    []Hook
	mutation *KothStatusMutation
}

// Where appends a list predicates to the KothStatusDelete builder.
func (ksd *KothStatusDelete) Where(ps ...predicate.KothStatus) *KothStatusDelete {
	ksd.mutation.Where(ps...)
	return ksd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ksd *KothStatusDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ksd.sqlExec, ksd.mutation, ksd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ksd *KothStatusDelete) ExecX(ctx context.Context) int {
	n, err := ksd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ksd *KothStatusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kothstatus.Table, sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID))
	if ps := ksd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ksd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ksd.mutation.done = true
	return affected, err
}

// KothStatusDeleteOne is the builder for deleting a single KothStatus entity.
type KothStatusDeleteOne struct {
	ksd *KothStatusDelete
}

// Where appends a list predicates to the KothStatusDelete builder.
func (ksdo *KothStatusDeleteOne) Where(ps ...predicate.KothStatus) *KothStatusDeleteOne {
	ksdo.ksd.mutation.Where(ps...)
	return ksdo
}

// Exec executes the deletion query.
func (ksdo *KothStatusDeleteOne) Exec(ctx context.Context) error {
	n, err := ksdo.ksd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kothstatus.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ksdo *KothStatusDeleteOne) ExecX(ctx context.Context) {
	if err := ksdo.Exec(ctx); err != nil {
		panic(err)
	}
}
