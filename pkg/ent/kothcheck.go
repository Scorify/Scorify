// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
)

// KothCheck is the model entity for the KothCheck schema.
type KothCheck struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of a koth status
	ID uuid.UUID `json:"id"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The name of the check
	Name string `json:"name"`
	// The file of the check
	File string `json:"file"`
	// The host of the check. This will be the value shown once a check is captured
	Host string `json:"host"`
	// The topic of the check. This will be the topic that is used to send the check to the server
	Topic string `json:"topic"`
	// The weight of the check
	Weight int `json:"weight"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KothCheckQuery when eager-loading is set.
	Edges        KothCheckEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KothCheckEdges holds the relations/edges for other nodes in the graph.
type KothCheckEdges struct {
	// The statuses of a check
	Statuses []*KothStatus `json:"statuses"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusesOrErr returns the Statuses value or an error if the edge
// was not loaded in eager-loading.
func (e KothCheckEdges) StatusesOrErr() ([]*KothStatus, error) {
	if e.loadedTypes[0] {
		return e.Statuses, nil
	}
	return nil, &NotLoadedError{edge: "statuses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KothCheck) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kothcheck.FieldWeight:
			values[i] = new(sql.NullInt64)
		case kothcheck.FieldName, kothcheck.FieldFile, kothcheck.FieldHost, kothcheck.FieldTopic:
			values[i] = new(sql.NullString)
		case kothcheck.FieldCreateTime, kothcheck.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case kothcheck.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KothCheck fields.
func (kc *KothCheck) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kothcheck.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				kc.ID = *value
			}
		case kothcheck.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				kc.CreateTime = value.Time
			}
		case kothcheck.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				kc.UpdateTime = value.Time
			}
		case kothcheck.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				kc.Name = value.String
			}
		case kothcheck.FieldFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[i])
			} else if value.Valid {
				kc.File = value.String
			}
		case kothcheck.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				kc.Host = value.String
			}
		case kothcheck.FieldTopic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic", values[i])
			} else if value.Valid {
				kc.Topic = value.String
			}
		case kothcheck.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				kc.Weight = int(value.Int64)
			}
		default:
			kc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KothCheck.
// This includes values selected through modifiers, order, etc.
func (kc *KothCheck) Value(name string) (ent.Value, error) {
	return kc.selectValues.Get(name)
}

// QueryStatuses queries the "statuses" edge of the KothCheck entity.
func (kc *KothCheck) QueryStatuses() *KothStatusQuery {
	return NewKothCheckClient(kc.config).QueryStatuses(kc)
}

// Update returns a builder for updating this KothCheck.
// Note that you need to call KothCheck.Unwrap() before calling this method if this KothCheck
// was returned from a transaction, and the transaction was committed or rolled back.
func (kc *KothCheck) Update() *KothCheckUpdateOne {
	return NewKothCheckClient(kc.config).UpdateOne(kc)
}

// Unwrap unwraps the KothCheck entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (kc *KothCheck) Unwrap() *KothCheck {
	_tx, ok := kc.config.driver.(*txDriver)
	if !ok {
		panic("ent: KothCheck is not a transactional entity")
	}
	kc.config.driver = _tx.drv
	return kc
}

// String implements the fmt.Stringer.
func (kc *KothCheck) String() string {
	var builder strings.Builder
	builder.WriteString("KothCheck(")
	builder.WriteString(fmt.Sprintf("id=%v, ", kc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(kc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(kc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(kc.Name)
	builder.WriteString(", ")
	builder.WriteString("file=")
	builder.WriteString(kc.File)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(kc.Host)
	builder.WriteString(", ")
	builder.WriteString("topic=")
	builder.WriteString(kc.Topic)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", kc.Weight))
	builder.WriteByte(')')
	return builder.String()
}

// KothChecks is a parsable slice of KothCheck.
type KothChecks []*KothCheck
