// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/scorify/scorify/pkg/ent/audit"
	"github.com/scorify/scorify/pkg/ent/check"
	"github.com/scorify/scorify/pkg/ent/checkconfig"
	"github.com/scorify/scorify/pkg/ent/inject"
	"github.com/scorify/scorify/pkg/ent/injectsubmission"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/minion"
	"github.com/scorify/scorify/pkg/ent/round"
	"github.com/scorify/scorify/pkg/ent/scorecache"
	"github.com/scorify/scorify/pkg/ent/status"
	"github.com/scorify/scorify/pkg/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// Check is the client for interacting with the Check builders.
	Check *CheckClient
	// CheckConfig is the client for interacting with the CheckConfig builders.
	CheckConfig *CheckConfigClient
	// Inject is the client for interacting with the Inject builders.
	Inject *InjectClient
	// InjectSubmission is the client for interacting with the InjectSubmission builders.
	InjectSubmission *InjectSubmissionClient
	// KothCheck is the client for interacting with the KothCheck builders.
	KothCheck *KothCheckClient
	// KothStatus is the client for interacting with the KothStatus builders.
	KothStatus *KothStatusClient
	// Minion is the client for interacting with the Minion builders.
	Minion *MinionClient
	// Round is the client for interacting with the Round builders.
	Round *RoundClient
	// ScoreCache is the client for interacting with the ScoreCache builders.
	ScoreCache *ScoreCacheClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Audit = NewAuditClient(c.config)
	c.Check = NewCheckClient(c.config)
	c.CheckConfig = NewCheckConfigClient(c.config)
	c.Inject = NewInjectClient(c.config)
	c.InjectSubmission = NewInjectSubmissionClient(c.config)
	c.KothCheck = NewKothCheckClient(c.config)
	c.KothStatus = NewKothStatusClient(c.config)
	c.Minion = NewMinionClient(c.config)
	c.Round = NewRoundClient(c.config)
	c.ScoreCache = NewScoreCacheClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Audit:            NewAuditClient(cfg),
		Check:            NewCheckClient(cfg),
		CheckConfig:      NewCheckConfigClient(cfg),
		Inject:           NewInjectClient(cfg),
		InjectSubmission: NewInjectSubmissionClient(cfg),
		KothCheck:        NewKothCheckClient(cfg),
		KothStatus:       NewKothStatusClient(cfg),
		Minion:           NewMinionClient(cfg),
		Round:            NewRoundClient(cfg),
		ScoreCache:       NewScoreCacheClient(cfg),
		Status:           NewStatusClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Audit:            NewAuditClient(cfg),
		Check:            NewCheckClient(cfg),
		CheckConfig:      NewCheckConfigClient(cfg),
		Inject:           NewInjectClient(cfg),
		InjectSubmission: NewInjectSubmissionClient(cfg),
		KothCheck:        NewKothCheckClient(cfg),
		KothStatus:       NewKothStatusClient(cfg),
		Minion:           NewMinionClient(cfg),
		Round:            NewRoundClient(cfg),
		ScoreCache:       NewScoreCacheClient(cfg),
		Status:           NewStatusClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Audit.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Audit, c.Check, c.CheckConfig, c.Inject, c.InjectSubmission, c.KothCheck,
		c.KothStatus, c.Minion, c.Round, c.ScoreCache, c.Status, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Audit, c.Check, c.CheckConfig, c.Inject, c.InjectSubmission, c.KothCheck,
		c.KothStatus, c.Minion, c.Round, c.ScoreCache, c.Status, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditMutation:
		return c.Audit.mutate(ctx, m)
	case *CheckMutation:
		return c.Check.mutate(ctx, m)
	case *CheckConfigMutation:
		return c.CheckConfig.mutate(ctx, m)
	case *InjectMutation:
		return c.Inject.mutate(ctx, m)
	case *InjectSubmissionMutation:
		return c.InjectSubmission.mutate(ctx, m)
	case *KothCheckMutation:
		return c.KothCheck.mutate(ctx, m)
	case *KothStatusMutation:
		return c.KothStatus.mutate(ctx, m)
	case *MinionMutation:
		return c.Minion.mutate(ctx, m)
	case *RoundMutation:
		return c.Round.mutate(ctx, m)
	case *ScoreCacheMutation:
		return c.ScoreCache.mutate(ctx, m)
	case *StatusMutation:
		return c.Status.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `audit.Intercept(f(g(h())))`.
func (c *AuditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Audit = append(c.inters.Audit, interceptors...)
}

// Create returns a builder for creating a Audit entity.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditClient) MapCreateBulk(slice any, setFunc func(*AuditCreate, int)) *AuditCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditCreateBulk{err: fmt.Errorf("calling to AuditClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(a *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(a))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id uuid.UUID) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditClient) DeleteOne(a *Audit) *AuditDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditClient) DeleteOneID(id uuid.UUID) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAudit},
		inters: c.Interceptors(),
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id uuid.UUID) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id uuid.UUID) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Audit.
func (c *AuditClient) QueryUser(a *Audit) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(audit.Table, audit.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, audit.UserTable, audit.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// Interceptors returns the client interceptors.
func (c *AuditClient) Interceptors() []Interceptor {
	return c.inters.Audit
}

func (c *AuditClient) mutate(ctx context.Context, m *AuditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Audit mutation op: %q", m.Op())
	}
}

// CheckClient is a client for the Check schema.
type CheckClient struct {
	config
}

// NewCheckClient returns a client for the Check from the given config.
func NewCheckClient(c config) *CheckClient {
	return &CheckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `check.Hooks(f(g(h())))`.
func (c *CheckClient) Use(hooks ...Hook) {
	c.hooks.Check = append(c.hooks.Check, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `check.Intercept(f(g(h())))`.
func (c *CheckClient) Intercept(interceptors ...Interceptor) {
	c.inters.Check = append(c.inters.Check, interceptors...)
}

// Create returns a builder for creating a Check entity.
func (c *CheckClient) Create() *CheckCreate {
	mutation := newCheckMutation(c.config, OpCreate)
	return &CheckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Check entities.
func (c *CheckClient) CreateBulk(builders ...*CheckCreate) *CheckCreateBulk {
	return &CheckCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CheckClient) MapCreateBulk(slice any, setFunc func(*CheckCreate, int)) *CheckCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CheckCreateBulk{err: fmt.Errorf("calling to CheckClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CheckCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CheckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Check.
func (c *CheckClient) Update() *CheckUpdate {
	mutation := newCheckMutation(c.config, OpUpdate)
	return &CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckClient) UpdateOne(ch *Check) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheck(ch))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckClient) UpdateOneID(id uuid.UUID) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheckID(id))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Check.
func (c *CheckClient) Delete() *CheckDelete {
	mutation := newCheckMutation(c.config, OpDelete)
	return &CheckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CheckClient) DeleteOne(ch *Check) *CheckDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CheckClient) DeleteOneID(id uuid.UUID) *CheckDeleteOne {
	builder := c.Delete().Where(check.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckDeleteOne{builder}
}

// Query returns a query builder for Check.
func (c *CheckClient) Query() *CheckQuery {
	return &CheckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCheck},
		inters: c.Interceptors(),
	}
}

// Get returns a Check entity by its id.
func (c *CheckClient) Get(ctx context.Context, id uuid.UUID) (*Check, error) {
	return c.Query().Where(check.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckClient) GetX(ctx context.Context, id uuid.UUID) *Check {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfigs queries the configs edge of a Check.
func (c *CheckClient) QueryConfigs(ch *Check) *CheckConfigQuery {
	query := (&CheckConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(check.Table, check.FieldID, id),
			sqlgraph.To(checkconfig.Table, checkconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, check.ConfigsTable, check.ConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatuses queries the statuses edge of a Check.
func (c *CheckClient) QueryStatuses(ch *Check) *StatusQuery {
	query := (&StatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(check.Table, check.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, check.StatusesTable, check.StatusesColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckClient) Hooks() []Hook {
	return c.hooks.Check
}

// Interceptors returns the client interceptors.
func (c *CheckClient) Interceptors() []Interceptor {
	return c.inters.Check
}

func (c *CheckClient) mutate(ctx context.Context, m *CheckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CheckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CheckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Check mutation op: %q", m.Op())
	}
}

// CheckConfigClient is a client for the CheckConfig schema.
type CheckConfigClient struct {
	config
}

// NewCheckConfigClient returns a client for the CheckConfig from the given config.
func NewCheckConfigClient(c config) *CheckConfigClient {
	return &CheckConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkconfig.Hooks(f(g(h())))`.
func (c *CheckConfigClient) Use(hooks ...Hook) {
	c.hooks.CheckConfig = append(c.hooks.CheckConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `checkconfig.Intercept(f(g(h())))`.
func (c *CheckConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.CheckConfig = append(c.inters.CheckConfig, interceptors...)
}

// Create returns a builder for creating a CheckConfig entity.
func (c *CheckConfigClient) Create() *CheckConfigCreate {
	mutation := newCheckConfigMutation(c.config, OpCreate)
	return &CheckConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckConfig entities.
func (c *CheckConfigClient) CreateBulk(builders ...*CheckConfigCreate) *CheckConfigCreateBulk {
	return &CheckConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CheckConfigClient) MapCreateBulk(slice any, setFunc func(*CheckConfigCreate, int)) *CheckConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CheckConfigCreateBulk{err: fmt.Errorf("calling to CheckConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CheckConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CheckConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckConfig.
func (c *CheckConfigClient) Update() *CheckConfigUpdate {
	mutation := newCheckConfigMutation(c.config, OpUpdate)
	return &CheckConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckConfigClient) UpdateOne(cc *CheckConfig) *CheckConfigUpdateOne {
	mutation := newCheckConfigMutation(c.config, OpUpdateOne, withCheckConfig(cc))
	return &CheckConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckConfigClient) UpdateOneID(id uuid.UUID) *CheckConfigUpdateOne {
	mutation := newCheckConfigMutation(c.config, OpUpdateOne, withCheckConfigID(id))
	return &CheckConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckConfig.
func (c *CheckConfigClient) Delete() *CheckConfigDelete {
	mutation := newCheckConfigMutation(c.config, OpDelete)
	return &CheckConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CheckConfigClient) DeleteOne(cc *CheckConfig) *CheckConfigDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CheckConfigClient) DeleteOneID(id uuid.UUID) *CheckConfigDeleteOne {
	builder := c.Delete().Where(checkconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckConfigDeleteOne{builder}
}

// Query returns a query builder for CheckConfig.
func (c *CheckConfigClient) Query() *CheckConfigQuery {
	return &CheckConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCheckConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a CheckConfig entity by its id.
func (c *CheckConfigClient) Get(ctx context.Context, id uuid.UUID) (*CheckConfig, error) {
	return c.Query().Where(checkconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckConfigClient) GetX(ctx context.Context, id uuid.UUID) *CheckConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheck queries the check edge of a CheckConfig.
func (c *CheckConfigClient) QueryCheck(cc *CheckConfig) *CheckQuery {
	query := (&CheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkconfig.Table, checkconfig.FieldID, id),
			sqlgraph.To(check.Table, check.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkconfig.CheckTable, checkconfig.CheckColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a CheckConfig.
func (c *CheckConfigClient) QueryUser(cc *CheckConfig) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkconfig.Table, checkconfig.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkconfig.UserTable, checkconfig.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckConfigClient) Hooks() []Hook {
	return c.hooks.CheckConfig
}

// Interceptors returns the client interceptors.
func (c *CheckConfigClient) Interceptors() []Interceptor {
	return c.inters.CheckConfig
}

func (c *CheckConfigClient) mutate(ctx context.Context, m *CheckConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CheckConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CheckConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CheckConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CheckConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CheckConfig mutation op: %q", m.Op())
	}
}

// InjectClient is a client for the Inject schema.
type InjectClient struct {
	config
}

// NewInjectClient returns a client for the Inject from the given config.
func NewInjectClient(c config) *InjectClient {
	return &InjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inject.Hooks(f(g(h())))`.
func (c *InjectClient) Use(hooks ...Hook) {
	c.hooks.Inject = append(c.hooks.Inject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inject.Intercept(f(g(h())))`.
func (c *InjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inject = append(c.inters.Inject, interceptors...)
}

// Create returns a builder for creating a Inject entity.
func (c *InjectClient) Create() *InjectCreate {
	mutation := newInjectMutation(c.config, OpCreate)
	return &InjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inject entities.
func (c *InjectClient) CreateBulk(builders ...*InjectCreate) *InjectCreateBulk {
	return &InjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InjectClient) MapCreateBulk(slice any, setFunc func(*InjectCreate, int)) *InjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InjectCreateBulk{err: fmt.Errorf("calling to InjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inject.
func (c *InjectClient) Update() *InjectUpdate {
	mutation := newInjectMutation(c.config, OpUpdate)
	return &InjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InjectClient) UpdateOne(i *Inject) *InjectUpdateOne {
	mutation := newInjectMutation(c.config, OpUpdateOne, withInject(i))
	return &InjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InjectClient) UpdateOneID(id uuid.UUID) *InjectUpdateOne {
	mutation := newInjectMutation(c.config, OpUpdateOne, withInjectID(id))
	return &InjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inject.
func (c *InjectClient) Delete() *InjectDelete {
	mutation := newInjectMutation(c.config, OpDelete)
	return &InjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InjectClient) DeleteOne(i *Inject) *InjectDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InjectClient) DeleteOneID(id uuid.UUID) *InjectDeleteOne {
	builder := c.Delete().Where(inject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InjectDeleteOne{builder}
}

// Query returns a query builder for Inject.
func (c *InjectClient) Query() *InjectQuery {
	return &InjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInject},
		inters: c.Interceptors(),
	}
}

// Get returns a Inject entity by its id.
func (c *InjectClient) Get(ctx context.Context, id uuid.UUID) (*Inject, error) {
	return c.Query().Where(inject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InjectClient) GetX(ctx context.Context, id uuid.UUID) *Inject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubmissions queries the submissions edge of a Inject.
func (c *InjectClient) QuerySubmissions(i *Inject) *InjectSubmissionQuery {
	query := (&InjectSubmissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inject.Table, inject.FieldID, id),
			sqlgraph.To(injectsubmission.Table, injectsubmission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inject.SubmissionsTable, inject.SubmissionsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InjectClient) Hooks() []Hook {
	return c.hooks.Inject
}

// Interceptors returns the client interceptors.
func (c *InjectClient) Interceptors() []Interceptor {
	return c.inters.Inject
}

func (c *InjectClient) mutate(ctx context.Context, m *InjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inject mutation op: %q", m.Op())
	}
}

// InjectSubmissionClient is a client for the InjectSubmission schema.
type InjectSubmissionClient struct {
	config
}

// NewInjectSubmissionClient returns a client for the InjectSubmission from the given config.
func NewInjectSubmissionClient(c config) *InjectSubmissionClient {
	return &InjectSubmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `injectsubmission.Hooks(f(g(h())))`.
func (c *InjectSubmissionClient) Use(hooks ...Hook) {
	c.hooks.InjectSubmission = append(c.hooks.InjectSubmission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `injectsubmission.Intercept(f(g(h())))`.
func (c *InjectSubmissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.InjectSubmission = append(c.inters.InjectSubmission, interceptors...)
}

// Create returns a builder for creating a InjectSubmission entity.
func (c *InjectSubmissionClient) Create() *InjectSubmissionCreate {
	mutation := newInjectSubmissionMutation(c.config, OpCreate)
	return &InjectSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InjectSubmission entities.
func (c *InjectSubmissionClient) CreateBulk(builders ...*InjectSubmissionCreate) *InjectSubmissionCreateBulk {
	return &InjectSubmissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InjectSubmissionClient) MapCreateBulk(slice any, setFunc func(*InjectSubmissionCreate, int)) *InjectSubmissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InjectSubmissionCreateBulk{err: fmt.Errorf("calling to InjectSubmissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InjectSubmissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InjectSubmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InjectSubmission.
func (c *InjectSubmissionClient) Update() *InjectSubmissionUpdate {
	mutation := newInjectSubmissionMutation(c.config, OpUpdate)
	return &InjectSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InjectSubmissionClient) UpdateOne(is *InjectSubmission) *InjectSubmissionUpdateOne {
	mutation := newInjectSubmissionMutation(c.config, OpUpdateOne, withInjectSubmission(is))
	return &InjectSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InjectSubmissionClient) UpdateOneID(id uuid.UUID) *InjectSubmissionUpdateOne {
	mutation := newInjectSubmissionMutation(c.config, OpUpdateOne, withInjectSubmissionID(id))
	return &InjectSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InjectSubmission.
func (c *InjectSubmissionClient) Delete() *InjectSubmissionDelete {
	mutation := newInjectSubmissionMutation(c.config, OpDelete)
	return &InjectSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InjectSubmissionClient) DeleteOne(is *InjectSubmission) *InjectSubmissionDeleteOne {
	return c.DeleteOneID(is.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InjectSubmissionClient) DeleteOneID(id uuid.UUID) *InjectSubmissionDeleteOne {
	builder := c.Delete().Where(injectsubmission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InjectSubmissionDeleteOne{builder}
}

// Query returns a query builder for InjectSubmission.
func (c *InjectSubmissionClient) Query() *InjectSubmissionQuery {
	return &InjectSubmissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInjectSubmission},
		inters: c.Interceptors(),
	}
}

// Get returns a InjectSubmission entity by its id.
func (c *InjectSubmissionClient) Get(ctx context.Context, id uuid.UUID) (*InjectSubmission, error) {
	return c.Query().Where(injectsubmission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InjectSubmissionClient) GetX(ctx context.Context, id uuid.UUID) *InjectSubmission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInject queries the inject edge of a InjectSubmission.
func (c *InjectSubmissionClient) QueryInject(is *InjectSubmission) *InjectQuery {
	query := (&InjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := is.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(injectsubmission.Table, injectsubmission.FieldID, id),
			sqlgraph.To(inject.Table, inject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, injectsubmission.InjectTable, injectsubmission.InjectColumn),
		)
		fromV = sqlgraph.Neighbors(is.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a InjectSubmission.
func (c *InjectSubmissionClient) QueryUser(is *InjectSubmission) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := is.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(injectsubmission.Table, injectsubmission.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, injectsubmission.UserTable, injectsubmission.UserColumn),
		)
		fromV = sqlgraph.Neighbors(is.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InjectSubmissionClient) Hooks() []Hook {
	return c.hooks.InjectSubmission
}

// Interceptors returns the client interceptors.
func (c *InjectSubmissionClient) Interceptors() []Interceptor {
	return c.inters.InjectSubmission
}

func (c *InjectSubmissionClient) mutate(ctx context.Context, m *InjectSubmissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InjectSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InjectSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InjectSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InjectSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InjectSubmission mutation op: %q", m.Op())
	}
}

// KothCheckClient is a client for the KothCheck schema.
type KothCheckClient struct {
	config
}

// NewKothCheckClient returns a client for the KothCheck from the given config.
func NewKothCheckClient(c config) *KothCheckClient {
	return &KothCheckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kothcheck.Hooks(f(g(h())))`.
func (c *KothCheckClient) Use(hooks ...Hook) {
	c.hooks.KothCheck = append(c.hooks.KothCheck, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `kothcheck.Intercept(f(g(h())))`.
func (c *KothCheckClient) Intercept(interceptors ...Interceptor) {
	c.inters.KothCheck = append(c.inters.KothCheck, interceptors...)
}

// Create returns a builder for creating a KothCheck entity.
func (c *KothCheckClient) Create() *KothCheckCreate {
	mutation := newKothCheckMutation(c.config, OpCreate)
	return &KothCheckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KothCheck entities.
func (c *KothCheckClient) CreateBulk(builders ...*KothCheckCreate) *KothCheckCreateBulk {
	return &KothCheckCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KothCheckClient) MapCreateBulk(slice any, setFunc func(*KothCheckCreate, int)) *KothCheckCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KothCheckCreateBulk{err: fmt.Errorf("calling to KothCheckClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KothCheckCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KothCheckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KothCheck.
func (c *KothCheckClient) Update() *KothCheckUpdate {
	mutation := newKothCheckMutation(c.config, OpUpdate)
	return &KothCheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KothCheckClient) UpdateOne(kc *KothCheck) *KothCheckUpdateOne {
	mutation := newKothCheckMutation(c.config, OpUpdateOne, withKothCheck(kc))
	return &KothCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KothCheckClient) UpdateOneID(id uuid.UUID) *KothCheckUpdateOne {
	mutation := newKothCheckMutation(c.config, OpUpdateOne, withKothCheckID(id))
	return &KothCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KothCheck.
func (c *KothCheckClient) Delete() *KothCheckDelete {
	mutation := newKothCheckMutation(c.config, OpDelete)
	return &KothCheckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KothCheckClient) DeleteOne(kc *KothCheck) *KothCheckDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KothCheckClient) DeleteOneID(id uuid.UUID) *KothCheckDeleteOne {
	builder := c.Delete().Where(kothcheck.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KothCheckDeleteOne{builder}
}

// Query returns a query builder for KothCheck.
func (c *KothCheckClient) Query() *KothCheckQuery {
	return &KothCheckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKothCheck},
		inters: c.Interceptors(),
	}
}

// Get returns a KothCheck entity by its id.
func (c *KothCheckClient) Get(ctx context.Context, id uuid.UUID) (*KothCheck, error) {
	return c.Query().Where(kothcheck.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KothCheckClient) GetX(ctx context.Context, id uuid.UUID) *KothCheck {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatuses queries the statuses edge of a KothCheck.
func (c *KothCheckClient) QueryStatuses(kc *KothCheck) *KothStatusQuery {
	query := (&KothStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kothcheck.Table, kothcheck.FieldID, id),
			sqlgraph.To(kothstatus.Table, kothstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kothcheck.StatusesTable, kothcheck.StatusesColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KothCheckClient) Hooks() []Hook {
	return c.hooks.KothCheck
}

// Interceptors returns the client interceptors.
func (c *KothCheckClient) Interceptors() []Interceptor {
	return c.inters.KothCheck
}

func (c *KothCheckClient) mutate(ctx context.Context, m *KothCheckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KothCheckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KothCheckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KothCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KothCheckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KothCheck mutation op: %q", m.Op())
	}
}

// KothStatusClient is a client for the KothStatus schema.
type KothStatusClient struct {
	config
}

// NewKothStatusClient returns a client for the KothStatus from the given config.
func NewKothStatusClient(c config) *KothStatusClient {
	return &KothStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kothstatus.Hooks(f(g(h())))`.
func (c *KothStatusClient) Use(hooks ...Hook) {
	c.hooks.KothStatus = append(c.hooks.KothStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `kothstatus.Intercept(f(g(h())))`.
func (c *KothStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.KothStatus = append(c.inters.KothStatus, interceptors...)
}

// Create returns a builder for creating a KothStatus entity.
func (c *KothStatusClient) Create() *KothStatusCreate {
	mutation := newKothStatusMutation(c.config, OpCreate)
	return &KothStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KothStatus entities.
func (c *KothStatusClient) CreateBulk(builders ...*KothStatusCreate) *KothStatusCreateBulk {
	return &KothStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KothStatusClient) MapCreateBulk(slice any, setFunc func(*KothStatusCreate, int)) *KothStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KothStatusCreateBulk{err: fmt.Errorf("calling to KothStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KothStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KothStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KothStatus.
func (c *KothStatusClient) Update() *KothStatusUpdate {
	mutation := newKothStatusMutation(c.config, OpUpdate)
	return &KothStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KothStatusClient) UpdateOne(ks *KothStatus) *KothStatusUpdateOne {
	mutation := newKothStatusMutation(c.config, OpUpdateOne, withKothStatus(ks))
	return &KothStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KothStatusClient) UpdateOneID(id uuid.UUID) *KothStatusUpdateOne {
	mutation := newKothStatusMutation(c.config, OpUpdateOne, withKothStatusID(id))
	return &KothStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KothStatus.
func (c *KothStatusClient) Delete() *KothStatusDelete {
	mutation := newKothStatusMutation(c.config, OpDelete)
	return &KothStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KothStatusClient) DeleteOne(ks *KothStatus) *KothStatusDeleteOne {
	return c.DeleteOneID(ks.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KothStatusClient) DeleteOneID(id uuid.UUID) *KothStatusDeleteOne {
	builder := c.Delete().Where(kothstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KothStatusDeleteOne{builder}
}

// Query returns a query builder for KothStatus.
func (c *KothStatusClient) Query() *KothStatusQuery {
	return &KothStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKothStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a KothStatus entity by its id.
func (c *KothStatusClient) Get(ctx context.Context, id uuid.UUID) (*KothStatus, error) {
	return c.Query().Where(kothstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KothStatusClient) GetX(ctx context.Context, id uuid.UUID) *KothStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a KothStatus.
func (c *KothStatusClient) QueryUser(ks *KothStatus) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kothstatus.Table, kothstatus.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kothstatus.UserTable, kothstatus.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRound queries the round edge of a KothStatus.
func (c *KothStatusClient) QueryRound(ks *KothStatus) *RoundQuery {
	query := (&RoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kothstatus.Table, kothstatus.FieldID, id),
			sqlgraph.To(round.Table, round.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kothstatus.RoundTable, kothstatus.RoundColumn),
		)
		fromV = sqlgraph.Neighbors(ks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMinion queries the minion edge of a KothStatus.
func (c *KothStatusClient) QueryMinion(ks *KothStatus) *MinionQuery {
	query := (&MinionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kothstatus.Table, kothstatus.FieldID, id),
			sqlgraph.To(minion.Table, minion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, kothstatus.MinionTable, kothstatus.MinionColumn),
		)
		fromV = sqlgraph.Neighbors(ks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheck queries the check edge of a KothStatus.
func (c *KothStatusClient) QueryCheck(ks *KothStatus) *KothCheckQuery {
	query := (&KothCheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kothstatus.Table, kothstatus.FieldID, id),
			sqlgraph.To(kothcheck.Table, kothcheck.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kothstatus.CheckTable, kothstatus.CheckColumn),
		)
		fromV = sqlgraph.Neighbors(ks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KothStatusClient) Hooks() []Hook {
	return c.hooks.KothStatus
}

// Interceptors returns the client interceptors.
func (c *KothStatusClient) Interceptors() []Interceptor {
	return c.inters.KothStatus
}

func (c *KothStatusClient) mutate(ctx context.Context, m *KothStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KothStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KothStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KothStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KothStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KothStatus mutation op: %q", m.Op())
	}
}

// MinionClient is a client for the Minion schema.
type MinionClient struct {
	config
}

// NewMinionClient returns a client for the Minion from the given config.
func NewMinionClient(c config) *MinionClient {
	return &MinionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `minion.Hooks(f(g(h())))`.
func (c *MinionClient) Use(hooks ...Hook) {
	c.hooks.Minion = append(c.hooks.Minion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `minion.Intercept(f(g(h())))`.
func (c *MinionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Minion = append(c.inters.Minion, interceptors...)
}

// Create returns a builder for creating a Minion entity.
func (c *MinionClient) Create() *MinionCreate {
	mutation := newMinionMutation(c.config, OpCreate)
	return &MinionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Minion entities.
func (c *MinionClient) CreateBulk(builders ...*MinionCreate) *MinionCreateBulk {
	return &MinionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MinionClient) MapCreateBulk(slice any, setFunc func(*MinionCreate, int)) *MinionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MinionCreateBulk{err: fmt.Errorf("calling to MinionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MinionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MinionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Minion.
func (c *MinionClient) Update() *MinionUpdate {
	mutation := newMinionMutation(c.config, OpUpdate)
	return &MinionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MinionClient) UpdateOne(m *Minion) *MinionUpdateOne {
	mutation := newMinionMutation(c.config, OpUpdateOne, withMinion(m))
	return &MinionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MinionClient) UpdateOneID(id uuid.UUID) *MinionUpdateOne {
	mutation := newMinionMutation(c.config, OpUpdateOne, withMinionID(id))
	return &MinionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Minion.
func (c *MinionClient) Delete() *MinionDelete {
	mutation := newMinionMutation(c.config, OpDelete)
	return &MinionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MinionClient) DeleteOne(m *Minion) *MinionDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MinionClient) DeleteOneID(id uuid.UUID) *MinionDeleteOne {
	builder := c.Delete().Where(minion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MinionDeleteOne{builder}
}

// Query returns a query builder for Minion.
func (c *MinionClient) Query() *MinionQuery {
	return &MinionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMinion},
		inters: c.Interceptors(),
	}
}

// Get returns a Minion entity by its id.
func (c *MinionClient) Get(ctx context.Context, id uuid.UUID) (*Minion, error) {
	return c.Query().Where(minion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MinionClient) GetX(ctx context.Context, id uuid.UUID) *Minion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatuses queries the statuses edge of a Minion.
func (c *MinionClient) QueryStatuses(m *Minion) *StatusQuery {
	query := (&StatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(minion.Table, minion.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, minion.StatusesTable, minion.StatusesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKothStatuses queries the kothStatuses edge of a Minion.
func (c *MinionClient) QueryKothStatuses(m *Minion) *KothStatusQuery {
	query := (&KothStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(minion.Table, minion.FieldID, id),
			sqlgraph.To(kothstatus.Table, kothstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, minion.KothStatusesTable, minion.KothStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MinionClient) Hooks() []Hook {
	return c.hooks.Minion
}

// Interceptors returns the client interceptors.
func (c *MinionClient) Interceptors() []Interceptor {
	return c.inters.Minion
}

func (c *MinionClient) mutate(ctx context.Context, m *MinionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MinionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MinionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MinionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MinionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Minion mutation op: %q", m.Op())
	}
}

// RoundClient is a client for the Round schema.
type RoundClient struct {
	config
}

// NewRoundClient returns a client for the Round from the given config.
func NewRoundClient(c config) *RoundClient {
	return &RoundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `round.Hooks(f(g(h())))`.
func (c *RoundClient) Use(hooks ...Hook) {
	c.hooks.Round = append(c.hooks.Round, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `round.Intercept(f(g(h())))`.
func (c *RoundClient) Intercept(interceptors ...Interceptor) {
	c.inters.Round = append(c.inters.Round, interceptors...)
}

// Create returns a builder for creating a Round entity.
func (c *RoundClient) Create() *RoundCreate {
	mutation := newRoundMutation(c.config, OpCreate)
	return &RoundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Round entities.
func (c *RoundClient) CreateBulk(builders ...*RoundCreate) *RoundCreateBulk {
	return &RoundCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoundClient) MapCreateBulk(slice any, setFunc func(*RoundCreate, int)) *RoundCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoundCreateBulk{err: fmt.Errorf("calling to RoundClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoundCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Round.
func (c *RoundClient) Update() *RoundUpdate {
	mutation := newRoundMutation(c.config, OpUpdate)
	return &RoundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoundClient) UpdateOne(r *Round) *RoundUpdateOne {
	mutation := newRoundMutation(c.config, OpUpdateOne, withRound(r))
	return &RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoundClient) UpdateOneID(id uuid.UUID) *RoundUpdateOne {
	mutation := newRoundMutation(c.config, OpUpdateOne, withRoundID(id))
	return &RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Round.
func (c *RoundClient) Delete() *RoundDelete {
	mutation := newRoundMutation(c.config, OpDelete)
	return &RoundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoundClient) DeleteOne(r *Round) *RoundDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoundClient) DeleteOneID(id uuid.UUID) *RoundDeleteOne {
	builder := c.Delete().Where(round.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoundDeleteOne{builder}
}

// Query returns a query builder for Round.
func (c *RoundClient) Query() *RoundQuery {
	return &RoundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRound},
		inters: c.Interceptors(),
	}
}

// Get returns a Round entity by its id.
func (c *RoundClient) Get(ctx context.Context, id uuid.UUID) (*Round, error) {
	return c.Query().Where(round.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoundClient) GetX(ctx context.Context, id uuid.UUID) *Round {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatuses queries the statuses edge of a Round.
func (c *RoundClient) QueryStatuses(r *Round) *StatusQuery {
	query := (&StatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(round.Table, round.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, round.StatusesTable, round.StatusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScoreCaches queries the scoreCaches edge of a Round.
func (c *RoundClient) QueryScoreCaches(r *Round) *ScoreCacheQuery {
	query := (&ScoreCacheClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(round.Table, round.FieldID, id),
			sqlgraph.To(scorecache.Table, scorecache.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, round.ScoreCachesTable, round.ScoreCachesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKothStatuses queries the kothStatuses edge of a Round.
func (c *RoundClient) QueryKothStatuses(r *Round) *KothStatusQuery {
	query := (&KothStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(round.Table, round.FieldID, id),
			sqlgraph.To(kothstatus.Table, kothstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, round.KothStatusesTable, round.KothStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoundClient) Hooks() []Hook {
	return c.hooks.Round
}

// Interceptors returns the client interceptors.
func (c *RoundClient) Interceptors() []Interceptor {
	return c.inters.Round
}

func (c *RoundClient) mutate(ctx context.Context, m *RoundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Round mutation op: %q", m.Op())
	}
}

// ScoreCacheClient is a client for the ScoreCache schema.
type ScoreCacheClient struct {
	config
}

// NewScoreCacheClient returns a client for the ScoreCache from the given config.
func NewScoreCacheClient(c config) *ScoreCacheClient {
	return &ScoreCacheClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scorecache.Hooks(f(g(h())))`.
func (c *ScoreCacheClient) Use(hooks ...Hook) {
	c.hooks.ScoreCache = append(c.hooks.ScoreCache, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scorecache.Intercept(f(g(h())))`.
func (c *ScoreCacheClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScoreCache = append(c.inters.ScoreCache, interceptors...)
}

// Create returns a builder for creating a ScoreCache entity.
func (c *ScoreCacheClient) Create() *ScoreCacheCreate {
	mutation := newScoreCacheMutation(c.config, OpCreate)
	return &ScoreCacheCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScoreCache entities.
func (c *ScoreCacheClient) CreateBulk(builders ...*ScoreCacheCreate) *ScoreCacheCreateBulk {
	return &ScoreCacheCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ScoreCacheClient) MapCreateBulk(slice any, setFunc func(*ScoreCacheCreate, int)) *ScoreCacheCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ScoreCacheCreateBulk{err: fmt.Errorf("calling to ScoreCacheClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ScoreCacheCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ScoreCacheCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScoreCache.
func (c *ScoreCacheClient) Update() *ScoreCacheUpdate {
	mutation := newScoreCacheMutation(c.config, OpUpdate)
	return &ScoreCacheUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScoreCacheClient) UpdateOne(sc *ScoreCache) *ScoreCacheUpdateOne {
	mutation := newScoreCacheMutation(c.config, OpUpdateOne, withScoreCache(sc))
	return &ScoreCacheUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScoreCacheClient) UpdateOneID(id uuid.UUID) *ScoreCacheUpdateOne {
	mutation := newScoreCacheMutation(c.config, OpUpdateOne, withScoreCacheID(id))
	return &ScoreCacheUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScoreCache.
func (c *ScoreCacheClient) Delete() *ScoreCacheDelete {
	mutation := newScoreCacheMutation(c.config, OpDelete)
	return &ScoreCacheDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScoreCacheClient) DeleteOne(sc *ScoreCache) *ScoreCacheDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScoreCacheClient) DeleteOneID(id uuid.UUID) *ScoreCacheDeleteOne {
	builder := c.Delete().Where(scorecache.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScoreCacheDeleteOne{builder}
}

// Query returns a query builder for ScoreCache.
func (c *ScoreCacheClient) Query() *ScoreCacheQuery {
	return &ScoreCacheQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScoreCache},
		inters: c.Interceptors(),
	}
}

// Get returns a ScoreCache entity by its id.
func (c *ScoreCacheClient) Get(ctx context.Context, id uuid.UUID) (*ScoreCache, error) {
	return c.Query().Where(scorecache.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScoreCacheClient) GetX(ctx context.Context, id uuid.UUID) *ScoreCache {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRound queries the round edge of a ScoreCache.
func (c *ScoreCacheClient) QueryRound(sc *ScoreCache) *RoundQuery {
	query := (&RoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scorecache.Table, scorecache.FieldID, id),
			sqlgraph.To(round.Table, round.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scorecache.RoundTable, scorecache.RoundColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ScoreCache.
func (c *ScoreCacheClient) QueryUser(sc *ScoreCache) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scorecache.Table, scorecache.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scorecache.UserTable, scorecache.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScoreCacheClient) Hooks() []Hook {
	return c.hooks.ScoreCache
}

// Interceptors returns the client interceptors.
func (c *ScoreCacheClient) Interceptors() []Interceptor {
	return c.inters.ScoreCache
}

func (c *ScoreCacheClient) mutate(ctx context.Context, m *ScoreCacheMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScoreCacheCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScoreCacheUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScoreCacheUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScoreCacheDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScoreCache mutation op: %q", m.Op())
	}
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `status.Intercept(f(g(h())))`.
func (c *StatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.Status = append(c.inters.Status, interceptors...)
}

// Create returns a builder for creating a Status entity.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Status entities.
func (c *StatusClient) CreateBulk(builders ...*StatusCreate) *StatusCreateBulk {
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StatusClient) MapCreateBulk(slice any, setFunc func(*StatusCreate, int)) *StatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StatusCreateBulk{err: fmt.Errorf("calling to StatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id uuid.UUID) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatusClient) DeleteOneID(id uuid.UUID) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Query returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id uuid.UUID) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id uuid.UUID) *Status {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheck queries the check edge of a Status.
func (c *StatusClient) QueryCheck(s *Status) *CheckQuery {
	query := (&CheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(check.Table, check.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, status.CheckTable, status.CheckColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRound queries the round edge of a Status.
func (c *StatusClient) QueryRound(s *Status) *RoundQuery {
	query := (&RoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(round.Table, round.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, status.RoundTable, status.RoundColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Status.
func (c *StatusClient) QueryUser(s *Status) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, status.UserTable, status.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMinion queries the minion edge of a Status.
func (c *StatusClient) QueryMinion(s *Status) *MinionQuery {
	query := (&MinionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(minion.Table, minion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, status.MinionTable, status.MinionColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// Interceptors returns the client interceptors.
func (c *StatusClient) Interceptors() []Interceptor {
	return c.inters.Status
}

func (c *StatusClient) mutate(ctx context.Context, m *StatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Status mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfigs queries the configs edge of a User.
func (c *UserClient) QueryConfigs(u *User) *CheckConfigQuery {
	query := (&CheckConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(checkconfig.Table, checkconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ConfigsTable, user.ConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatuses queries the statuses edge of a User.
func (c *UserClient) QueryStatuses(u *User) *StatusQuery {
	query := (&StatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StatusesTable, user.StatusesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScoreCaches queries the scoreCaches edge of a User.
func (c *UserClient) QueryScoreCaches(u *User) *ScoreCacheQuery {
	query := (&ScoreCacheClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(scorecache.Table, scorecache.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ScoreCachesTable, user.ScoreCachesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubmissions queries the submissions edge of a User.
func (c *UserClient) QuerySubmissions(u *User) *InjectSubmissionQuery {
	query := (&InjectSubmissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(injectsubmission.Table, injectsubmission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SubmissionsTable, user.SubmissionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKothStatuses queries the kothStatuses edge of a User.
func (c *UserClient) QueryKothStatuses(u *User) *KothStatusQuery {
	query := (&KothStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(kothstatus.Table, kothstatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.KothStatusesTable, user.KothStatusesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Audit, Check, CheckConfig, Inject, InjectSubmission, KothCheck, KothStatus,
		Minion, Round, ScoreCache, Status, User []ent.Hook
	}
	inters struct {
		Audit, Check, CheckConfig, Inject, InjectSubmission, KothCheck, KothStatus,
		Minion, Round, ScoreCache, Status, User []ent.Interceptor
	}
)
