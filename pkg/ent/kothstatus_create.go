// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/minion"
	"github.com/scorify/scorify/pkg/ent/round"
	"github.com/scorify/scorify/pkg/ent/user"
)

// KothStatusCreate is the builder for creating a KothStatus entity.
type KothStatusCreate struct {
	config
	mutation *KothStatusMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ksc *KothStatusCreate) SetCreateTime(t time.Time) *KothStatusCreate {
	ksc.mutation.SetCreateTime(t)
	return ksc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ksc *KothStatusCreate) SetNillableCreateTime(t *time.Time) *KothStatusCreate {
	if t != nil {
		ksc.SetCreateTime(*t)
	}
	return ksc
}

// SetUpdateTime sets the "update_time" field.
func (ksc *KothStatusCreate) SetUpdateTime(t time.Time) *KothStatusCreate {
	ksc.mutation.SetUpdateTime(t)
	return ksc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ksc *KothStatusCreate) SetNillableUpdateTime(t *time.Time) *KothStatusCreate {
	if t != nil {
		ksc.SetUpdateTime(*t)
	}
	return ksc
}

// SetUserID sets the "user_id" field.
func (ksc *KothStatusCreate) SetUserID(u uuid.UUID) *KothStatusCreate {
	ksc.mutation.SetUserID(u)
	return ksc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ksc *KothStatusCreate) SetNillableUserID(u *uuid.UUID) *KothStatusCreate {
	if u != nil {
		ksc.SetUserID(*u)
	}
	return ksc
}

// SetRoundID sets the "round_id" field.
func (ksc *KothStatusCreate) SetRoundID(u uuid.UUID) *KothStatusCreate {
	ksc.mutation.SetRoundID(u)
	return ksc
}

// SetMinionID sets the "minion_id" field.
func (ksc *KothStatusCreate) SetMinionID(u uuid.UUID) *KothStatusCreate {
	ksc.mutation.SetMinionID(u)
	return ksc
}

// SetNillableMinionID sets the "minion_id" field if the given value is not nil.
func (ksc *KothStatusCreate) SetNillableMinionID(u *uuid.UUID) *KothStatusCreate {
	if u != nil {
		ksc.SetMinionID(*u)
	}
	return ksc
}

// SetCheckID sets the "check_id" field.
func (ksc *KothStatusCreate) SetCheckID(u uuid.UUID) *KothStatusCreate {
	ksc.mutation.SetCheckID(u)
	return ksc
}

// SetPoints sets the "points" field.
func (ksc *KothStatusCreate) SetPoints(i int) *KothStatusCreate {
	ksc.mutation.SetPoints(i)
	return ksc
}

// SetID sets the "id" field.
func (ksc *KothStatusCreate) SetID(u uuid.UUID) *KothStatusCreate {
	ksc.mutation.SetID(u)
	return ksc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ksc *KothStatusCreate) SetNillableID(u *uuid.UUID) *KothStatusCreate {
	if u != nil {
		ksc.SetID(*u)
	}
	return ksc
}

// SetUser sets the "user" edge to the User entity.
func (ksc *KothStatusCreate) SetUser(u *User) *KothStatusCreate {
	return ksc.SetUserID(u.ID)
}

// SetRound sets the "round" edge to the Round entity.
func (ksc *KothStatusCreate) SetRound(r *Round) *KothStatusCreate {
	return ksc.SetRoundID(r.ID)
}

// SetMinion sets the "minion" edge to the Minion entity.
func (ksc *KothStatusCreate) SetMinion(m *Minion) *KothStatusCreate {
	return ksc.SetMinionID(m.ID)
}

// SetCheck sets the "check" edge to the KothCheck entity.
func (ksc *KothStatusCreate) SetCheck(k *KothCheck) *KothStatusCreate {
	return ksc.SetCheckID(k.ID)
}

// Mutation returns the KothStatusMutation object of the builder.
func (ksc *KothStatusCreate) Mutation() *KothStatusMutation {
	return ksc.mutation
}

// Save creates the KothStatus in the database.
func (ksc *KothStatusCreate) Save(ctx context.Context) (*KothStatus, error) {
	ksc.defaults()
	return withHooks(ctx, ksc.sqlSave, ksc.mutation, ksc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ksc *KothStatusCreate) SaveX(ctx context.Context) *KothStatus {
	v, err := ksc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ksc *KothStatusCreate) Exec(ctx context.Context) error {
	_, err := ksc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ksc *KothStatusCreate) ExecX(ctx context.Context) {
	if err := ksc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ksc *KothStatusCreate) defaults() {
	if _, ok := ksc.mutation.CreateTime(); !ok {
		v := kothstatus.DefaultCreateTime()
		ksc.mutation.SetCreateTime(v)
	}
	if _, ok := ksc.mutation.UpdateTime(); !ok {
		v := kothstatus.DefaultUpdateTime()
		ksc.mutation.SetUpdateTime(v)
	}
	if _, ok := ksc.mutation.ID(); !ok {
		v := kothstatus.DefaultID()
		ksc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ksc *KothStatusCreate) check() error {
	if _, ok := ksc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "KothStatus.create_time"`)}
	}
	if _, ok := ksc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "KothStatus.update_time"`)}
	}
	if _, ok := ksc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`ent: missing required field "KothStatus.round_id"`)}
	}
	if _, ok := ksc.mutation.CheckID(); !ok {
		return &ValidationError{Name: "check_id", err: errors.New(`ent: missing required field "KothStatus.check_id"`)}
	}
	if _, ok := ksc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "KothStatus.points"`)}
	}
	if v, ok := ksc.mutation.Points(); ok {
		if err := kothstatus.PointsValidator(v); err != nil {
			return &ValidationError{Name: "points", err: fmt.Errorf(`ent: validator failed for field "KothStatus.points": %w`, err)}
		}
	}
	if _, ok := ksc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round", err: errors.New(`ent: missing required edge "KothStatus.round"`)}
	}
	if _, ok := ksc.mutation.CheckID(); !ok {
		return &ValidationError{Name: "check", err: errors.New(`ent: missing required edge "KothStatus.check"`)}
	}
	return nil
}

func (ksc *KothStatusCreate) sqlSave(ctx context.Context) (*KothStatus, error) {
	if err := ksc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ksc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ksc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ksc.mutation.id = &_node.ID
	ksc.mutation.done = true
	return _node, nil
}

func (ksc *KothStatusCreate) createSpec() (*KothStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &KothStatus{config: ksc.config}
		_spec = sqlgraph.NewCreateSpec(kothstatus.Table, sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID))
	)
	if id, ok := ksc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ksc.mutation.CreateTime(); ok {
		_spec.SetField(kothstatus.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ksc.mutation.UpdateTime(); ok {
		_spec.SetField(kothstatus.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ksc.mutation.Points(); ok {
		_spec.SetField(kothstatus.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if nodes := ksc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kothstatus.UserTable,
			Columns: []string{kothstatus.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ksc.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kothstatus.RoundTable,
			Columns: []string{kothstatus.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoundID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ksc.mutation.MinionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   kothstatus.MinionTable,
			Columns: []string{kothstatus.MinionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(minion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MinionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ksc.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kothstatus.CheckTable,
			Columns: []string{kothstatus.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothcheck.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CheckID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KothStatusCreateBulk is the builder for creating many KothStatus entities in bulk.
type KothStatusCreateBulk struct {
	config
	err      error
	builders []*KothStatusCreate
}

// Save creates the KothStatus entities in the database.
func (kscb *KothStatusCreateBulk) Save(ctx context.Context) ([]*KothStatus, error) {
	if kscb.err != nil {
		return nil, kscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kscb.builders))
	nodes := make([]*KothStatus, len(kscb.builders))
	mutators := make([]Mutator, len(kscb.builders))
	for i := range kscb.builders {
		func(i int, root context.Context) {
			builder := kscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KothStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kscb *KothStatusCreateBulk) SaveX(ctx context.Context) []*KothStatus {
	v, err := kscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kscb *KothStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := kscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kscb *KothStatusCreateBulk) ExecX(ctx context.Context) {
	if err := kscb.Exec(ctx); err != nil {
		panic(err)
	}
}
