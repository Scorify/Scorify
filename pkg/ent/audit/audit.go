// Code generated by ent, DO NOT EDIT.

package audit

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the audit type in the database.
	Label = "audit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldResource holds the string denoting the resource field in the database.
	FieldResource = "resource"
	// FieldLog holds the string denoting the log field in the database.
	FieldLog = "log"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the audit in the database.
	Table = "audits"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "audits"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "audit_user"
)

// Columns holds all SQL columns for audit fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldResource,
	FieldLog,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "audits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"audit_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// LogValidator is a validator for the "log" field. It is called by the builders before save.
	LogValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Resource defines the type for the "resource" enum field.
type Resource string

// Resource values.
const (
	ResourceAuthentication Resource = "authentication"
	ResourceChecks         Resource = "checks"
	ResourceDatabase       Resource = "database"
	ResourceEngineState    Resource = "engine_state"
	ResourceInjects        Resource = "injects"
	ResourceNotifications  Resource = "notifications"
	ResourceOther          Resource = "other"
	ResourceUsers          Resource = "users"
)

func (r Resource) String() string {
	return string(r)
}

// ResourceValidator is a validator for the "resource" field enum values. It is called by the builders before save.
func ResourceValidator(r Resource) error {
	switch r {
	case ResourceAuthentication, ResourceChecks, ResourceDatabase, ResourceEngineState, ResourceInjects, ResourceNotifications, ResourceOther, ResourceUsers:
		return nil
	default:
		return fmt.Errorf("audit: invalid enum value for resource field: %q", r)
	}
}

// OrderOption defines the ordering options for the Audit queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByResource orders the results by the resource field.
func ByResource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResource, opts...).ToFunc()
}

// ByLog orders the results by the log field.
func ByLog(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLog, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
