// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/inject"
	"github.com/scorify/scorify/pkg/ent/injectsubmission"
	"github.com/scorify/scorify/pkg/ent/user"
	"github.com/scorify/scorify/pkg/structs"
)

// InjectSubmission is the model entity for the InjectSubmission schema.
type InjectSubmission struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of an inject submission
	ID uuid.UUID `json:"id"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The files of the inject submission
	Files []structs.File `json:"files"`
	// The inject this submission belongs to
	InjectID uuid.UUID `json:"inject_id"`
	// The user this submission belongs to
	UserID uuid.UUID `json:"user_id"`
	// The notes of the inject submission
	Notes string `json:"notes"`
	// The rubric of the inject submission
	Rubric *structs.Rubric `json:"rubric"`
	// The graded status of the inject submission
	Graded bool `json:"graded"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InjectSubmissionQuery when eager-loading is set.
	Edges        InjectSubmissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InjectSubmissionEdges holds the relations/edges for other nodes in the graph.
type InjectSubmissionEdges struct {
	// The inject this submission belongs to
	Inject *Inject `json:"inject"`
	// The user this submission belongs to
	User *User `json:"user"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InjectOrErr returns the Inject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InjectSubmissionEdges) InjectOrErr() (*Inject, error) {
	if e.Inject != nil {
		return e.Inject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: inject.Label}
	}
	return nil, &NotLoadedError{edge: "inject"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InjectSubmissionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InjectSubmission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case injectsubmission.FieldFiles, injectsubmission.FieldRubric:
			values[i] = new([]byte)
		case injectsubmission.FieldGraded:
			values[i] = new(sql.NullBool)
		case injectsubmission.FieldNotes:
			values[i] = new(sql.NullString)
		case injectsubmission.FieldCreateTime, injectsubmission.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case injectsubmission.FieldID, injectsubmission.FieldInjectID, injectsubmission.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InjectSubmission fields.
func (is *InjectSubmission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case injectsubmission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				is.ID = *value
			}
		case injectsubmission.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				is.CreateTime = value.Time
			}
		case injectsubmission.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				is.UpdateTime = value.Time
			}
		case injectsubmission.FieldFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &is.Files); err != nil {
					return fmt.Errorf("unmarshal field files: %w", err)
				}
			}
		case injectsubmission.FieldInjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field inject_id", values[i])
			} else if value != nil {
				is.InjectID = *value
			}
		case injectsubmission.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				is.UserID = *value
			}
		case injectsubmission.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				is.Notes = value.String
			}
		case injectsubmission.FieldRubric:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rubric", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &is.Rubric); err != nil {
					return fmt.Errorf("unmarshal field rubric: %w", err)
				}
			}
		case injectsubmission.FieldGraded:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field graded", values[i])
			} else if value.Valid {
				is.Graded = value.Bool
			}
		default:
			is.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InjectSubmission.
// This includes values selected through modifiers, order, etc.
func (is *InjectSubmission) Value(name string) (ent.Value, error) {
	return is.selectValues.Get(name)
}

// QueryInject queries the "inject" edge of the InjectSubmission entity.
func (is *InjectSubmission) QueryInject() *InjectQuery {
	return NewInjectSubmissionClient(is.config).QueryInject(is)
}

// QueryUser queries the "user" edge of the InjectSubmission entity.
func (is *InjectSubmission) QueryUser() *UserQuery {
	return NewInjectSubmissionClient(is.config).QueryUser(is)
}

// Update returns a builder for updating this InjectSubmission.
// Note that you need to call InjectSubmission.Unwrap() before calling this method if this InjectSubmission
// was returned from a transaction, and the transaction was committed or rolled back.
func (is *InjectSubmission) Update() *InjectSubmissionUpdateOne {
	return NewInjectSubmissionClient(is.config).UpdateOne(is)
}

// Unwrap unwraps the InjectSubmission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (is *InjectSubmission) Unwrap() *InjectSubmission {
	_tx, ok := is.config.driver.(*txDriver)
	if !ok {
		panic("ent: InjectSubmission is not a transactional entity")
	}
	is.config.driver = _tx.drv
	return is
}

// String implements the fmt.Stringer.
func (is *InjectSubmission) String() string {
	var builder strings.Builder
	builder.WriteString("InjectSubmission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", is.ID))
	builder.WriteString("create_time=")
	builder.WriteString(is.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(is.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("files=")
	builder.WriteString(fmt.Sprintf("%v", is.Files))
	builder.WriteString(", ")
	builder.WriteString("inject_id=")
	builder.WriteString(fmt.Sprintf("%v", is.InjectID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", is.UserID))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(is.Notes)
	builder.WriteString(", ")
	builder.WriteString("rubric=")
	builder.WriteString(fmt.Sprintf("%v", is.Rubric))
	builder.WriteString(", ")
	builder.WriteString("graded=")
	builder.WriteString(fmt.Sprintf("%v", is.Graded))
	builder.WriteByte(')')
	return builder.String()
}

// InjectSubmissions is a parsable slice of InjectSubmission.
type InjectSubmissions []*InjectSubmission
