// Code generated by ent, DO NOT EDIT.

package injectsubmission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the injectsubmission type in the database.
	Label = "inject_submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFiles holds the string denoting the files field in the database.
	FieldFiles = "files"
	// FieldInjectID holds the string denoting the inject_id field in the database.
	FieldInjectID = "inject_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldRubric holds the string denoting the rubric field in the database.
	FieldRubric = "rubric"
	// FieldGraded holds the string denoting the graded field in the database.
	FieldGraded = "graded"
	// EdgeInject holds the string denoting the inject edge name in mutations.
	EdgeInject = "inject"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the injectsubmission in the database.
	Table = "inject_submissions"
	// InjectTable is the table that holds the inject relation/edge.
	InjectTable = "inject_submissions"
	// InjectInverseTable is the table name for the Inject entity.
	// It exists in this package in order to avoid circular dependency with the "inject" package.
	InjectInverseTable = "injects"
	// InjectColumn is the table column denoting the inject relation/edge.
	InjectColumn = "inject_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "inject_submissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for injectsubmission fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFiles,
	FieldInjectID,
	FieldUserID,
	FieldNotes,
	FieldRubric,
	FieldGraded,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultGraded holds the default value on creation for the "graded" field.
	DefaultGraded bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the InjectSubmission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByInjectID orders the results by the inject_id field.
func ByInjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInjectID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByGraded orders the results by the graded field.
func ByGraded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGraded, opts...).ToFunc()
}

// ByInjectField orders the results by inject field.
func ByInjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newInjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InjectTable, InjectColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
