// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/check"
	"github.com/scorify/scorify/pkg/ent/checkconfig"
	"github.com/scorify/scorify/pkg/ent/user"
)

// CheckConfigCreate is the builder for creating a CheckConfig entity.
type CheckConfigCreate struct {
	config
	mutation *CheckConfigMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ccc *CheckConfigCreate) SetCreateTime(t time.Time) *CheckConfigCreate {
	ccc.mutation.SetCreateTime(t)
	return ccc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ccc *CheckConfigCreate) SetNillableCreateTime(t *time.Time) *CheckConfigCreate {
	if t != nil {
		ccc.SetCreateTime(*t)
	}
	return ccc
}

// SetUpdateTime sets the "update_time" field.
func (ccc *CheckConfigCreate) SetUpdateTime(t time.Time) *CheckConfigCreate {
	ccc.mutation.SetUpdateTime(t)
	return ccc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ccc *CheckConfigCreate) SetNillableUpdateTime(t *time.Time) *CheckConfigCreate {
	if t != nil {
		ccc.SetUpdateTime(*t)
	}
	return ccc
}

// SetConfig sets the "config" field.
func (ccc *CheckConfigCreate) SetConfig(m map[string]interface{}) *CheckConfigCreate {
	ccc.mutation.SetConfig(m)
	return ccc
}

// SetCheckID sets the "check_id" field.
func (ccc *CheckConfigCreate) SetCheckID(u uuid.UUID) *CheckConfigCreate {
	ccc.mutation.SetCheckID(u)
	return ccc
}

// SetUserID sets the "user_id" field.
func (ccc *CheckConfigCreate) SetUserID(u uuid.UUID) *CheckConfigCreate {
	ccc.mutation.SetUserID(u)
	return ccc
}

// SetID sets the "id" field.
func (ccc *CheckConfigCreate) SetID(u uuid.UUID) *CheckConfigCreate {
	ccc.mutation.SetID(u)
	return ccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ccc *CheckConfigCreate) SetNillableID(u *uuid.UUID) *CheckConfigCreate {
	if u != nil {
		ccc.SetID(*u)
	}
	return ccc
}

// SetCheck sets the "check" edge to the Check entity.
func (ccc *CheckConfigCreate) SetCheck(c *Check) *CheckConfigCreate {
	return ccc.SetCheckID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ccc *CheckConfigCreate) SetUser(u *User) *CheckConfigCreate {
	return ccc.SetUserID(u.ID)
}

// Mutation returns the CheckConfigMutation object of the builder.
func (ccc *CheckConfigCreate) Mutation() *CheckConfigMutation {
	return ccc.mutation
}

// Save creates the CheckConfig in the database.
func (ccc *CheckConfigCreate) Save(ctx context.Context) (*CheckConfig, error) {
	ccc.defaults()
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CheckConfigCreate) SaveX(ctx context.Context) *CheckConfig {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CheckConfigCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CheckConfigCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CheckConfigCreate) defaults() {
	if _, ok := ccc.mutation.CreateTime(); !ok {
		v := checkconfig.DefaultCreateTime()
		ccc.mutation.SetCreateTime(v)
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		v := checkconfig.DefaultUpdateTime()
		ccc.mutation.SetUpdateTime(v)
	}
	if _, ok := ccc.mutation.ID(); !ok {
		v := checkconfig.DefaultID()
		ccc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CheckConfigCreate) check() error {
	if _, ok := ccc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CheckConfig.create_time"`)}
	}
	if _, ok := ccc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CheckConfig.update_time"`)}
	}
	if _, ok := ccc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "CheckConfig.config"`)}
	}
	if _, ok := ccc.mutation.CheckID(); !ok {
		return &ValidationError{Name: "check_id", err: errors.New(`ent: missing required field "CheckConfig.check_id"`)}
	}
	if _, ok := ccc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "CheckConfig.user_id"`)}
	}
	if _, ok := ccc.mutation.CheckID(); !ok {
		return &ValidationError{Name: "check", err: errors.New(`ent: missing required edge "CheckConfig.check"`)}
	}
	if _, ok := ccc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "CheckConfig.user"`)}
	}
	return nil
}

func (ccc *CheckConfigCreate) sqlSave(ctx context.Context) (*CheckConfig, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CheckConfigCreate) createSpec() (*CheckConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckConfig{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(checkconfig.Table, sqlgraph.NewFieldSpec(checkconfig.FieldID, field.TypeUUID))
	)
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ccc.mutation.CreateTime(); ok {
		_spec.SetField(checkconfig.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ccc.mutation.UpdateTime(); ok {
		_spec.SetField(checkconfig.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ccc.mutation.Config(); ok {
		_spec.SetField(checkconfig.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if nodes := ccc.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkconfig.CheckTable,
			Columns: []string{checkconfig.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CheckID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ccc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkconfig.UserTable,
			Columns: []string{checkconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckConfigCreateBulk is the builder for creating many CheckConfig entities in bulk.
type CheckConfigCreateBulk struct {
	config
	err      error
	builders []*CheckConfigCreate
}

// Save creates the CheckConfig entities in the database.
func (cccb *CheckConfigCreateBulk) Save(ctx context.Context) ([]*CheckConfig, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CheckConfig, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CheckConfigCreateBulk) SaveX(ctx context.Context) []*CheckConfig {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CheckConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CheckConfigCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
