// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
	"github.com/scorify/scorify/pkg/ent/predicate"
)

// KothCheckDelete is the builder for deleting a KothCheck entity.
type KothCheckDelete struct {
	config
	hooks    []Hook
	mutation *KothCheckMutation
}

// Where appends a list predicates to the KothCheckDelete builder.
func (kcd *KothCheckDelete) Where(ps ...predicate.KothCheck) *KothCheckDelete {
	kcd.mutation.Where(ps...)
	return kcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kcd *KothCheckDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kcd.sqlExec, kcd.mutation, kcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kcd *KothCheckDelete) ExecX(ctx context.Context) int {
	n, err := kcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kcd *KothCheckDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(kothcheck.Table, sqlgraph.NewFieldSpec(kothcheck.FieldID, field.TypeUUID))
	if ps := kcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kcd.mutation.done = true
	return affected, err
}

// KothCheckDeleteOne is the builder for deleting a single KothCheck entity.
type KothCheckDeleteOne struct {
	kcd *KothCheckDelete
}

// Where appends a list predicates to the KothCheckDelete builder.
func (kcdo *KothCheckDeleteOne) Where(ps ...predicate.KothCheck) *KothCheckDeleteOne {
	kcdo.kcd.mutation.Where(ps...)
	return kcdo
}

// Exec executes the deletion query.
func (kcdo *KothCheckDeleteOne) Exec(ctx context.Context) error {
	n, err := kcdo.kcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{kothcheck.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kcdo *KothCheckDeleteOne) ExecX(ctx context.Context) {
	if err := kcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
