// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/minion"
	"github.com/scorify/scorify/pkg/ent/predicate"
	"github.com/scorify/scorify/pkg/ent/status"
)

// MinionUpdate is the builder for updating Minion entities.
type MinionUpdate struct {
	config
	hooks    []Hook
	mutation *MinionMutation
}

// Where appends a list predicates to the MinionUpdate builder.
func (mu *MinionUpdate) Where(ps ...predicate.Minion) *MinionUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MinionUpdate) SetUpdateTime(t time.Time) *MinionUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetName sets the "name" field.
func (mu *MinionUpdate) SetName(s string) *MinionUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MinionUpdate) SetNillableName(s *string) *MinionUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetIP sets the "ip" field.
func (mu *MinionUpdate) SetIP(s string) *MinionUpdate {
	mu.mutation.SetIP(s)
	return mu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (mu *MinionUpdate) SetNillableIP(s *string) *MinionUpdate {
	if s != nil {
		mu.SetIP(*s)
	}
	return mu
}

// SetDeactivated sets the "deactivated" field.
func (mu *MinionUpdate) SetDeactivated(b bool) *MinionUpdate {
	mu.mutation.SetDeactivated(b)
	return mu
}

// SetNillableDeactivated sets the "deactivated" field if the given value is not nil.
func (mu *MinionUpdate) SetNillableDeactivated(b *bool) *MinionUpdate {
	if b != nil {
		mu.SetDeactivated(*b)
	}
	return mu
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (mu *MinionUpdate) AddStatusIDs(ids ...uuid.UUID) *MinionUpdate {
	mu.mutation.AddStatusIDs(ids...)
	return mu
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (mu *MinionUpdate) AddStatuses(s ...*Status) *MinionUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddStatusIDs(ids...)
}

// AddKothStatuseIDs adds the "kothStatuses" edge to the KothStatus entity by IDs.
func (mu *MinionUpdate) AddKothStatuseIDs(ids ...uuid.UUID) *MinionUpdate {
	mu.mutation.AddKothStatuseIDs(ids...)
	return mu
}

// AddKothStatuses adds the "kothStatuses" edges to the KothStatus entity.
func (mu *MinionUpdate) AddKothStatuses(k ...*KothStatus) *MinionUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mu.AddKothStatuseIDs(ids...)
}

// Mutation returns the MinionMutation object of the builder.
func (mu *MinionUpdate) Mutation() *MinionMutation {
	return mu.mutation
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (mu *MinionUpdate) ClearStatuses() *MinionUpdate {
	mu.mutation.ClearStatuses()
	return mu
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (mu *MinionUpdate) RemoveStatusIDs(ids ...uuid.UUID) *MinionUpdate {
	mu.mutation.RemoveStatusIDs(ids...)
	return mu
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (mu *MinionUpdate) RemoveStatuses(s ...*Status) *MinionUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveStatusIDs(ids...)
}

// ClearKothStatuses clears all "kothStatuses" edges to the KothStatus entity.
func (mu *MinionUpdate) ClearKothStatuses() *MinionUpdate {
	mu.mutation.ClearKothStatuses()
	return mu
}

// RemoveKothStatuseIDs removes the "kothStatuses" edge to KothStatus entities by IDs.
func (mu *MinionUpdate) RemoveKothStatuseIDs(ids ...uuid.UUID) *MinionUpdate {
	mu.mutation.RemoveKothStatuseIDs(ids...)
	return mu
}

// RemoveKothStatuses removes "kothStatuses" edges to KothStatus entities.
func (mu *MinionUpdate) RemoveKothStatuses(k ...*KothStatus) *MinionUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mu.RemoveKothStatuseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MinionUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MinionUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MinionUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MinionUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MinionUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := minion.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

func (mu *MinionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(minion.Table, minion.Columns, sqlgraph.NewFieldSpec(minion.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(minion.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(minion.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.IP(); ok {
		_spec.SetField(minion.FieldIP, field.TypeString, value)
	}
	if value, ok := mu.mutation.Deactivated(); ok {
		_spec.SetField(minion.FieldDeactivated, field.TypeBool, value)
	}
	if mu.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !mu.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedKothStatusesIDs(); len(nodes) > 0 && !mu.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.KothStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{minion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MinionUpdateOne is the builder for updating a single Minion entity.
type MinionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MinionMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MinionUpdateOne) SetUpdateTime(t time.Time) *MinionUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetName sets the "name" field.
func (muo *MinionUpdateOne) SetName(s string) *MinionUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MinionUpdateOne) SetNillableName(s *string) *MinionUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetIP sets the "ip" field.
func (muo *MinionUpdateOne) SetIP(s string) *MinionUpdateOne {
	muo.mutation.SetIP(s)
	return muo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (muo *MinionUpdateOne) SetNillableIP(s *string) *MinionUpdateOne {
	if s != nil {
		muo.SetIP(*s)
	}
	return muo
}

// SetDeactivated sets the "deactivated" field.
func (muo *MinionUpdateOne) SetDeactivated(b bool) *MinionUpdateOne {
	muo.mutation.SetDeactivated(b)
	return muo
}

// SetNillableDeactivated sets the "deactivated" field if the given value is not nil.
func (muo *MinionUpdateOne) SetNillableDeactivated(b *bool) *MinionUpdateOne {
	if b != nil {
		muo.SetDeactivated(*b)
	}
	return muo
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (muo *MinionUpdateOne) AddStatusIDs(ids ...uuid.UUID) *MinionUpdateOne {
	muo.mutation.AddStatusIDs(ids...)
	return muo
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (muo *MinionUpdateOne) AddStatuses(s ...*Status) *MinionUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddStatusIDs(ids...)
}

// AddKothStatuseIDs adds the "kothStatuses" edge to the KothStatus entity by IDs.
func (muo *MinionUpdateOne) AddKothStatuseIDs(ids ...uuid.UUID) *MinionUpdateOne {
	muo.mutation.AddKothStatuseIDs(ids...)
	return muo
}

// AddKothStatuses adds the "kothStatuses" edges to the KothStatus entity.
func (muo *MinionUpdateOne) AddKothStatuses(k ...*KothStatus) *MinionUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return muo.AddKothStatuseIDs(ids...)
}

// Mutation returns the MinionMutation object of the builder.
func (muo *MinionUpdateOne) Mutation() *MinionMutation {
	return muo.mutation
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (muo *MinionUpdateOne) ClearStatuses() *MinionUpdateOne {
	muo.mutation.ClearStatuses()
	return muo
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (muo *MinionUpdateOne) RemoveStatusIDs(ids ...uuid.UUID) *MinionUpdateOne {
	muo.mutation.RemoveStatusIDs(ids...)
	return muo
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (muo *MinionUpdateOne) RemoveStatuses(s ...*Status) *MinionUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveStatusIDs(ids...)
}

// ClearKothStatuses clears all "kothStatuses" edges to the KothStatus entity.
func (muo *MinionUpdateOne) ClearKothStatuses() *MinionUpdateOne {
	muo.mutation.ClearKothStatuses()
	return muo
}

// RemoveKothStatuseIDs removes the "kothStatuses" edge to KothStatus entities by IDs.
func (muo *MinionUpdateOne) RemoveKothStatuseIDs(ids ...uuid.UUID) *MinionUpdateOne {
	muo.mutation.RemoveKothStatuseIDs(ids...)
	return muo
}

// RemoveKothStatuses removes "kothStatuses" edges to KothStatus entities.
func (muo *MinionUpdateOne) RemoveKothStatuses(k ...*KothStatus) *MinionUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return muo.RemoveKothStatuseIDs(ids...)
}

// Where appends a list predicates to the MinionUpdate builder.
func (muo *MinionUpdateOne) Where(ps ...predicate.Minion) *MinionUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MinionUpdateOne) Select(field string, fields ...string) *MinionUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Minion entity.
func (muo *MinionUpdateOne) Save(ctx context.Context) (*Minion, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MinionUpdateOne) SaveX(ctx context.Context) *Minion {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MinionUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MinionUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MinionUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := minion.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

func (muo *MinionUpdateOne) sqlSave(ctx context.Context) (_node *Minion, err error) {
	_spec := sqlgraph.NewUpdateSpec(minion.Table, minion.Columns, sqlgraph.NewFieldSpec(minion.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Minion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, minion.FieldID)
		for _, f := range fields {
			if !minion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != minion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(minion.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(minion.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.IP(); ok {
		_spec.SetField(minion.FieldIP, field.TypeString, value)
	}
	if value, ok := muo.mutation.Deactivated(); ok {
		_spec.SetField(minion.FieldDeactivated, field.TypeBool, value)
	}
	if muo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !muo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.StatusesTable,
			Columns: []string{minion.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedKothStatusesIDs(); len(nodes) > 0 && !muo.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.KothStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   minion.KothStatusesTable,
			Columns: []string{minion.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Minion{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{minion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
