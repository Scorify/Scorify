// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/inject"
	"github.com/scorify/scorify/pkg/ent/injectsubmission"
	"github.com/scorify/scorify/pkg/structs"
)

// InjectCreate is the builder for creating a Inject entity.
type InjectCreate struct {
	config
	mutation *InjectMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *InjectCreate) SetCreateTime(t time.Time) *InjectCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *InjectCreate) SetNillableCreateTime(t *time.Time) *InjectCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *InjectCreate) SetUpdateTime(t time.Time) *InjectCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *InjectCreate) SetNillableUpdateTime(t *time.Time) *InjectCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetTitle sets the "title" field.
func (ic *InjectCreate) SetTitle(s string) *InjectCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetStartTime sets the "start_time" field.
func (ic *InjectCreate) SetStartTime(t time.Time) *InjectCreate {
	ic.mutation.SetStartTime(t)
	return ic
}

// SetEndTime sets the "end_time" field.
func (ic *InjectCreate) SetEndTime(t time.Time) *InjectCreate {
	ic.mutation.SetEndTime(t)
	return ic
}

// SetFiles sets the "files" field.
func (ic *InjectCreate) SetFiles(s []structs.File) *InjectCreate {
	ic.mutation.SetFiles(s)
	return ic
}

// SetRubric sets the "rubric" field.
func (ic *InjectCreate) SetRubric(st structs.RubricTemplate) *InjectCreate {
	ic.mutation.SetRubric(st)
	return ic
}

// SetID sets the "id" field.
func (ic *InjectCreate) SetID(u uuid.UUID) *InjectCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InjectCreate) SetNillableID(u *uuid.UUID) *InjectCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddSubmissionIDs adds the "submissions" edge to the InjectSubmission entity by IDs.
func (ic *InjectCreate) AddSubmissionIDs(ids ...uuid.UUID) *InjectCreate {
	ic.mutation.AddSubmissionIDs(ids...)
	return ic
}

// AddSubmissions adds the "submissions" edges to the InjectSubmission entity.
func (ic *InjectCreate) AddSubmissions(i ...*InjectSubmission) *InjectCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ic.AddSubmissionIDs(ids...)
}

// Mutation returns the InjectMutation object of the builder.
func (ic *InjectCreate) Mutation() *InjectMutation {
	return ic.mutation
}

// Save creates the Inject in the database.
func (ic *InjectCreate) Save(ctx context.Context) (*Inject, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InjectCreate) SaveX(ctx context.Context) *Inject {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InjectCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InjectCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InjectCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := inject.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := inject.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := inject.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InjectCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Inject.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Inject.update_time"`)}
	}
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Inject.title"`)}
	}
	if v, ok := ic.mutation.Title(); ok {
		if err := inject.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Inject.title": %w`, err)}
		}
	}
	if _, ok := ic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Inject.start_time"`)}
	}
	if _, ok := ic.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Inject.end_time"`)}
	}
	if _, ok := ic.mutation.Files(); !ok {
		return &ValidationError{Name: "files", err: errors.New(`ent: missing required field "Inject.files"`)}
	}
	if _, ok := ic.mutation.Rubric(); !ok {
		return &ValidationError{Name: "rubric", err: errors.New(`ent: missing required field "Inject.rubric"`)}
	}
	return nil
}

func (ic *InjectCreate) sqlSave(ctx context.Context) (*Inject, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InjectCreate) createSpec() (*Inject, *sqlgraph.CreateSpec) {
	var (
		_node = &Inject{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inject.Table, sqlgraph.NewFieldSpec(inject.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.SetField(inject.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.SetField(inject.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.SetField(inject.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ic.mutation.StartTime(); ok {
		_spec.SetField(inject.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ic.mutation.EndTime(); ok {
		_spec.SetField(inject.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ic.mutation.Files(); ok {
		_spec.SetField(inject.FieldFiles, field.TypeJSON, value)
		_node.Files = value
	}
	if value, ok := ic.mutation.Rubric(); ok {
		_spec.SetField(inject.FieldRubric, field.TypeJSON, value)
		_node.Rubric = value
	}
	if nodes := ic.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inject.SubmissionsTable,
			Columns: []string{inject.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(injectsubmission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InjectCreateBulk is the builder for creating many Inject entities in bulk.
type InjectCreateBulk struct {
	config
	err      error
	builders []*InjectCreate
}

// Save creates the Inject entities in the database.
func (icb *InjectCreateBulk) Save(ctx context.Context) ([]*Inject, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inject, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InjectCreateBulk) SaveX(ctx context.Context) []*Inject {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InjectCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InjectCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
