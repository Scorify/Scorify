// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/inject"
	"github.com/scorify/scorify/pkg/ent/injectsubmission"
	"github.com/scorify/scorify/pkg/ent/user"
	"github.com/scorify/scorify/pkg/structs"
)

// InjectSubmissionCreate is the builder for creating a InjectSubmission entity.
type InjectSubmissionCreate struct {
	config
	mutation *InjectSubmissionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (isc *InjectSubmissionCreate) SetCreateTime(t time.Time) *InjectSubmissionCreate {
	isc.mutation.SetCreateTime(t)
	return isc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (isc *InjectSubmissionCreate) SetNillableCreateTime(t *time.Time) *InjectSubmissionCreate {
	if t != nil {
		isc.SetCreateTime(*t)
	}
	return isc
}

// SetUpdateTime sets the "update_time" field.
func (isc *InjectSubmissionCreate) SetUpdateTime(t time.Time) *InjectSubmissionCreate {
	isc.mutation.SetUpdateTime(t)
	return isc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (isc *InjectSubmissionCreate) SetNillableUpdateTime(t *time.Time) *InjectSubmissionCreate {
	if t != nil {
		isc.SetUpdateTime(*t)
	}
	return isc
}

// SetFiles sets the "files" field.
func (isc *InjectSubmissionCreate) SetFiles(s []structs.File) *InjectSubmissionCreate {
	isc.mutation.SetFiles(s)
	return isc
}

// SetInjectID sets the "inject_id" field.
func (isc *InjectSubmissionCreate) SetInjectID(u uuid.UUID) *InjectSubmissionCreate {
	isc.mutation.SetInjectID(u)
	return isc
}

// SetUserID sets the "user_id" field.
func (isc *InjectSubmissionCreate) SetUserID(u uuid.UUID) *InjectSubmissionCreate {
	isc.mutation.SetUserID(u)
	return isc
}

// SetNotes sets the "notes" field.
func (isc *InjectSubmissionCreate) SetNotes(s string) *InjectSubmissionCreate {
	isc.mutation.SetNotes(s)
	return isc
}

// SetRubric sets the "rubric" field.
func (isc *InjectSubmissionCreate) SetRubric(s *structs.Rubric) *InjectSubmissionCreate {
	isc.mutation.SetRubric(s)
	return isc
}

// SetGraded sets the "graded" field.
func (isc *InjectSubmissionCreate) SetGraded(b bool) *InjectSubmissionCreate {
	isc.mutation.SetGraded(b)
	return isc
}

// SetNillableGraded sets the "graded" field if the given value is not nil.
func (isc *InjectSubmissionCreate) SetNillableGraded(b *bool) *InjectSubmissionCreate {
	if b != nil {
		isc.SetGraded(*b)
	}
	return isc
}

// SetID sets the "id" field.
func (isc *InjectSubmissionCreate) SetID(u uuid.UUID) *InjectSubmissionCreate {
	isc.mutation.SetID(u)
	return isc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (isc *InjectSubmissionCreate) SetNillableID(u *uuid.UUID) *InjectSubmissionCreate {
	if u != nil {
		isc.SetID(*u)
	}
	return isc
}

// SetInject sets the "inject" edge to the Inject entity.
func (isc *InjectSubmissionCreate) SetInject(i *Inject) *InjectSubmissionCreate {
	return isc.SetInjectID(i.ID)
}

// SetUser sets the "user" edge to the User entity.
func (isc *InjectSubmissionCreate) SetUser(u *User) *InjectSubmissionCreate {
	return isc.SetUserID(u.ID)
}

// Mutation returns the InjectSubmissionMutation object of the builder.
func (isc *InjectSubmissionCreate) Mutation() *InjectSubmissionMutation {
	return isc.mutation
}

// Save creates the InjectSubmission in the database.
func (isc *InjectSubmissionCreate) Save(ctx context.Context) (*InjectSubmission, error) {
	isc.defaults()
	return withHooks(ctx, isc.sqlSave, isc.mutation, isc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (isc *InjectSubmissionCreate) SaveX(ctx context.Context) *InjectSubmission {
	v, err := isc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isc *InjectSubmissionCreate) Exec(ctx context.Context) error {
	_, err := isc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isc *InjectSubmissionCreate) ExecX(ctx context.Context) {
	if err := isc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (isc *InjectSubmissionCreate) defaults() {
	if _, ok := isc.mutation.CreateTime(); !ok {
		v := injectsubmission.DefaultCreateTime()
		isc.mutation.SetCreateTime(v)
	}
	if _, ok := isc.mutation.UpdateTime(); !ok {
		v := injectsubmission.DefaultUpdateTime()
		isc.mutation.SetUpdateTime(v)
	}
	if _, ok := isc.mutation.Graded(); !ok {
		v := injectsubmission.DefaultGraded
		isc.mutation.SetGraded(v)
	}
	if _, ok := isc.mutation.ID(); !ok {
		v := injectsubmission.DefaultID()
		isc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isc *InjectSubmissionCreate) check() error {
	if _, ok := isc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "InjectSubmission.create_time"`)}
	}
	if _, ok := isc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "InjectSubmission.update_time"`)}
	}
	if _, ok := isc.mutation.Files(); !ok {
		return &ValidationError{Name: "files", err: errors.New(`ent: missing required field "InjectSubmission.files"`)}
	}
	if _, ok := isc.mutation.InjectID(); !ok {
		return &ValidationError{Name: "inject_id", err: errors.New(`ent: missing required field "InjectSubmission.inject_id"`)}
	}
	if _, ok := isc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "InjectSubmission.user_id"`)}
	}
	if _, ok := isc.mutation.Notes(); !ok {
		return &ValidationError{Name: "notes", err: errors.New(`ent: missing required field "InjectSubmission.notes"`)}
	}
	if _, ok := isc.mutation.Graded(); !ok {
		return &ValidationError{Name: "graded", err: errors.New(`ent: missing required field "InjectSubmission.graded"`)}
	}
	if _, ok := isc.mutation.InjectID(); !ok {
		return &ValidationError{Name: "inject", err: errors.New(`ent: missing required edge "InjectSubmission.inject"`)}
	}
	if _, ok := isc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "InjectSubmission.user"`)}
	}
	return nil
}

func (isc *InjectSubmissionCreate) sqlSave(ctx context.Context) (*InjectSubmission, error) {
	if err := isc.check(); err != nil {
		return nil, err
	}
	_node, _spec := isc.createSpec()
	if err := sqlgraph.CreateNode(ctx, isc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	isc.mutation.id = &_node.ID
	isc.mutation.done = true
	return _node, nil
}

func (isc *InjectSubmissionCreate) createSpec() (*InjectSubmission, *sqlgraph.CreateSpec) {
	var (
		_node = &InjectSubmission{config: isc.config}
		_spec = sqlgraph.NewCreateSpec(injectsubmission.Table, sqlgraph.NewFieldSpec(injectsubmission.FieldID, field.TypeUUID))
	)
	if id, ok := isc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := isc.mutation.CreateTime(); ok {
		_spec.SetField(injectsubmission.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := isc.mutation.UpdateTime(); ok {
		_spec.SetField(injectsubmission.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := isc.mutation.Files(); ok {
		_spec.SetField(injectsubmission.FieldFiles, field.TypeJSON, value)
		_node.Files = value
	}
	if value, ok := isc.mutation.Notes(); ok {
		_spec.SetField(injectsubmission.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := isc.mutation.Rubric(); ok {
		_spec.SetField(injectsubmission.FieldRubric, field.TypeJSON, value)
		_node.Rubric = value
	}
	if value, ok := isc.mutation.Graded(); ok {
		_spec.SetField(injectsubmission.FieldGraded, field.TypeBool, value)
		_node.Graded = value
	}
	if nodes := isc.mutation.InjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   injectsubmission.InjectTable,
			Columns: []string{injectsubmission.InjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := isc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   injectsubmission.UserTable,
			Columns: []string{injectsubmission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InjectSubmissionCreateBulk is the builder for creating many InjectSubmission entities in bulk.
type InjectSubmissionCreateBulk struct {
	config
	err      error
	builders []*InjectSubmissionCreate
}

// Save creates the InjectSubmission entities in the database.
func (iscb *InjectSubmissionCreateBulk) Save(ctx context.Context) ([]*InjectSubmission, error) {
	if iscb.err != nil {
		return nil, iscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iscb.builders))
	nodes := make([]*InjectSubmission, len(iscb.builders))
	mutators := make([]Mutator, len(iscb.builders))
	for i := range iscb.builders {
		func(i int, root context.Context) {
			builder := iscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InjectSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iscb *InjectSubmissionCreateBulk) SaveX(ctx context.Context) []*InjectSubmission {
	v, err := iscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscb *InjectSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := iscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscb *InjectSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := iscb.Exec(ctx); err != nil {
		panic(err)
	}
}
