// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/predicate"
	"github.com/scorify/scorify/pkg/ent/round"
	"github.com/scorify/scorify/pkg/ent/scorecache"
	"github.com/scorify/scorify/pkg/ent/status"
)

// RoundUpdate is the builder for updating Round entities.
type RoundUpdate struct {
	config
	hooks    []Hook
	mutation *RoundMutation
}

// Where appends a list predicates to the RoundUpdate builder.
func (ru *RoundUpdate) Where(ps ...predicate.Round) *RoundUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RoundUpdate) SetUpdateTime(t time.Time) *RoundUpdate {
	ru.mutation.SetUpdateTime(t)
	return ru
}

// SetNumber sets the "number" field.
func (ru *RoundUpdate) SetNumber(i int) *RoundUpdate {
	ru.mutation.ResetNumber()
	ru.mutation.SetNumber(i)
	return ru
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableNumber(i *int) *RoundUpdate {
	if i != nil {
		ru.SetNumber(*i)
	}
	return ru
}

// AddNumber adds i to the "number" field.
func (ru *RoundUpdate) AddNumber(i int) *RoundUpdate {
	ru.mutation.AddNumber(i)
	return ru
}

// SetComplete sets the "complete" field.
func (ru *RoundUpdate) SetComplete(b bool) *RoundUpdate {
	ru.mutation.SetComplete(b)
	return ru
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (ru *RoundUpdate) SetNillableComplete(b *bool) *RoundUpdate {
	if b != nil {
		ru.SetComplete(*b)
	}
	return ru
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (ru *RoundUpdate) AddStatusIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.AddStatusIDs(ids...)
	return ru
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (ru *RoundUpdate) AddStatuses(s ...*Status) *RoundUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddStatusIDs(ids...)
}

// AddScoreCachIDs adds the "scoreCaches" edge to the ScoreCache entity by IDs.
func (ru *RoundUpdate) AddScoreCachIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.AddScoreCachIDs(ids...)
	return ru
}

// AddScoreCaches adds the "scoreCaches" edges to the ScoreCache entity.
func (ru *RoundUpdate) AddScoreCaches(s ...*ScoreCache) *RoundUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddScoreCachIDs(ids...)
}

// AddKothStatuseIDs adds the "kothStatuses" edge to the KothStatus entity by IDs.
func (ru *RoundUpdate) AddKothStatuseIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.AddKothStatuseIDs(ids...)
	return ru
}

// AddKothStatuses adds the "kothStatuses" edges to the KothStatus entity.
func (ru *RoundUpdate) AddKothStatuses(k ...*KothStatus) *RoundUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ru.AddKothStatuseIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ru *RoundUpdate) Mutation() *RoundMutation {
	return ru.mutation
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (ru *RoundUpdate) ClearStatuses() *RoundUpdate {
	ru.mutation.ClearStatuses()
	return ru
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (ru *RoundUpdate) RemoveStatusIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.RemoveStatusIDs(ids...)
	return ru
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (ru *RoundUpdate) RemoveStatuses(s ...*Status) *RoundUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveStatusIDs(ids...)
}

// ClearScoreCaches clears all "scoreCaches" edges to the ScoreCache entity.
func (ru *RoundUpdate) ClearScoreCaches() *RoundUpdate {
	ru.mutation.ClearScoreCaches()
	return ru
}

// RemoveScoreCachIDs removes the "scoreCaches" edge to ScoreCache entities by IDs.
func (ru *RoundUpdate) RemoveScoreCachIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.RemoveScoreCachIDs(ids...)
	return ru
}

// RemoveScoreCaches removes "scoreCaches" edges to ScoreCache entities.
func (ru *RoundUpdate) RemoveScoreCaches(s ...*ScoreCache) *RoundUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveScoreCachIDs(ids...)
}

// ClearKothStatuses clears all "kothStatuses" edges to the KothStatus entity.
func (ru *RoundUpdate) ClearKothStatuses() *RoundUpdate {
	ru.mutation.ClearKothStatuses()
	return ru
}

// RemoveKothStatuseIDs removes the "kothStatuses" edge to KothStatus entities by IDs.
func (ru *RoundUpdate) RemoveKothStatuseIDs(ids ...uuid.UUID) *RoundUpdate {
	ru.mutation.RemoveKothStatuseIDs(ids...)
	return ru
}

// RemoveKothStatuses removes "kothStatuses" edges to KothStatus entities.
func (ru *RoundUpdate) RemoveKothStatuses(k ...*KothStatus) *RoundUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ru.RemoveKothStatuseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoundUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoundUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoundUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoundUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoundUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := round.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoundUpdate) check() error {
	if v, ok := ru.mutation.Number(); ok {
		if err := round.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Round.number": %w`, err)}
		}
	}
	return nil
}

func (ru *RoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(round.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Number(); ok {
		_spec.SetField(round.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumber(); ok {
		_spec.AddField(round.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Complete(); ok {
		_spec.SetField(round.FieldComplete, field.TypeBool, value)
	}
	if ru.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !ru.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ScoreCachesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedScoreCachesIDs(); len(nodes) > 0 && !ru.mutation.ScoreCachesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ScoreCachesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedKothStatusesIDs(); len(nodes) > 0 && !ru.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.KothStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoundUpdateOne is the builder for updating a single Round entity.
type RoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoundMutation
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RoundUpdateOne) SetUpdateTime(t time.Time) *RoundUpdateOne {
	ruo.mutation.SetUpdateTime(t)
	return ruo
}

// SetNumber sets the "number" field.
func (ruo *RoundUpdateOne) SetNumber(i int) *RoundUpdateOne {
	ruo.mutation.ResetNumber()
	ruo.mutation.SetNumber(i)
	return ruo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableNumber(i *int) *RoundUpdateOne {
	if i != nil {
		ruo.SetNumber(*i)
	}
	return ruo
}

// AddNumber adds i to the "number" field.
func (ruo *RoundUpdateOne) AddNumber(i int) *RoundUpdateOne {
	ruo.mutation.AddNumber(i)
	return ruo
}

// SetComplete sets the "complete" field.
func (ruo *RoundUpdateOne) SetComplete(b bool) *RoundUpdateOne {
	ruo.mutation.SetComplete(b)
	return ruo
}

// SetNillableComplete sets the "complete" field if the given value is not nil.
func (ruo *RoundUpdateOne) SetNillableComplete(b *bool) *RoundUpdateOne {
	if b != nil {
		ruo.SetComplete(*b)
	}
	return ruo
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (ruo *RoundUpdateOne) AddStatusIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.AddStatusIDs(ids...)
	return ruo
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (ruo *RoundUpdateOne) AddStatuses(s ...*Status) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddStatusIDs(ids...)
}

// AddScoreCachIDs adds the "scoreCaches" edge to the ScoreCache entity by IDs.
func (ruo *RoundUpdateOne) AddScoreCachIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.AddScoreCachIDs(ids...)
	return ruo
}

// AddScoreCaches adds the "scoreCaches" edges to the ScoreCache entity.
func (ruo *RoundUpdateOne) AddScoreCaches(s ...*ScoreCache) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddScoreCachIDs(ids...)
}

// AddKothStatuseIDs adds the "kothStatuses" edge to the KothStatus entity by IDs.
func (ruo *RoundUpdateOne) AddKothStatuseIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.AddKothStatuseIDs(ids...)
	return ruo
}

// AddKothStatuses adds the "kothStatuses" edges to the KothStatus entity.
func (ruo *RoundUpdateOne) AddKothStatuses(k ...*KothStatus) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ruo.AddKothStatuseIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (ruo *RoundUpdateOne) Mutation() *RoundMutation {
	return ruo.mutation
}

// ClearStatuses clears all "statuses" edges to the Status entity.
func (ruo *RoundUpdateOne) ClearStatuses() *RoundUpdateOne {
	ruo.mutation.ClearStatuses()
	return ruo
}

// RemoveStatusIDs removes the "statuses" edge to Status entities by IDs.
func (ruo *RoundUpdateOne) RemoveStatusIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.RemoveStatusIDs(ids...)
	return ruo
}

// RemoveStatuses removes "statuses" edges to Status entities.
func (ruo *RoundUpdateOne) RemoveStatuses(s ...*Status) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveStatusIDs(ids...)
}

// ClearScoreCaches clears all "scoreCaches" edges to the ScoreCache entity.
func (ruo *RoundUpdateOne) ClearScoreCaches() *RoundUpdateOne {
	ruo.mutation.ClearScoreCaches()
	return ruo
}

// RemoveScoreCachIDs removes the "scoreCaches" edge to ScoreCache entities by IDs.
func (ruo *RoundUpdateOne) RemoveScoreCachIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.RemoveScoreCachIDs(ids...)
	return ruo
}

// RemoveScoreCaches removes "scoreCaches" edges to ScoreCache entities.
func (ruo *RoundUpdateOne) RemoveScoreCaches(s ...*ScoreCache) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveScoreCachIDs(ids...)
}

// ClearKothStatuses clears all "kothStatuses" edges to the KothStatus entity.
func (ruo *RoundUpdateOne) ClearKothStatuses() *RoundUpdateOne {
	ruo.mutation.ClearKothStatuses()
	return ruo
}

// RemoveKothStatuseIDs removes the "kothStatuses" edge to KothStatus entities by IDs.
func (ruo *RoundUpdateOne) RemoveKothStatuseIDs(ids ...uuid.UUID) *RoundUpdateOne {
	ruo.mutation.RemoveKothStatuseIDs(ids...)
	return ruo
}

// RemoveKothStatuses removes "kothStatuses" edges to KothStatus entities.
func (ruo *RoundUpdateOne) RemoveKothStatuses(k ...*KothStatus) *RoundUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ruo.RemoveKothStatuseIDs(ids...)
}

// Where appends a list predicates to the RoundUpdate builder.
func (ruo *RoundUpdateOne) Where(ps ...predicate.Round) *RoundUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoundUpdateOne) Select(field string, fields ...string) *RoundUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Round entity.
func (ruo *RoundUpdateOne) Save(ctx context.Context) (*Round, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoundUpdateOne) SaveX(ctx context.Context) *Round {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoundUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoundUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoundUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := round.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoundUpdateOne) check() error {
	if v, ok := ruo.mutation.Number(); ok {
		if err := round.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Round.number": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoundUpdateOne) sqlSave(ctx context.Context) (_node *Round, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(round.Table, round.Columns, sqlgraph.NewFieldSpec(round.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Round.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, round.FieldID)
		for _, f := range fields {
			if !round.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != round.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(round.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Number(); ok {
		_spec.SetField(round.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumber(); ok {
		_spec.AddField(round.FieldNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Complete(); ok {
		_spec.SetField(round.FieldComplete, field.TypeBool, value)
	}
	if ruo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !ruo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.StatusesTable,
			Columns: []string{round.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(status.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ScoreCachesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedScoreCachesIDs(); len(nodes) > 0 && !ruo.mutation.ScoreCachesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ScoreCachesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ScoreCachesTable,
			Columns: []string{round.ScoreCachesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scorecache.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedKothStatusesIDs(); len(nodes) > 0 && !ruo.mutation.KothStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.KothStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.KothStatusesTable,
			Columns: []string{round.KothStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Round{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{round.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
