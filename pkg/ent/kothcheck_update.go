// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/predicate"
)

// KothCheckUpdate is the builder for updating KothCheck entities.
type KothCheckUpdate struct {
	config
	hooks    []Hook
	mutation *KothCheckMutation
}

// Where appends a list predicates to the KothCheckUpdate builder.
func (kcu *KothCheckUpdate) Where(ps ...predicate.KothCheck) *KothCheckUpdate {
	kcu.mutation.Where(ps...)
	return kcu
}

// SetUpdateTime sets the "update_time" field.
func (kcu *KothCheckUpdate) SetUpdateTime(t time.Time) *KothCheckUpdate {
	kcu.mutation.SetUpdateTime(t)
	return kcu
}

// SetName sets the "name" field.
func (kcu *KothCheckUpdate) SetName(s string) *KothCheckUpdate {
	kcu.mutation.SetName(s)
	return kcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kcu *KothCheckUpdate) SetNillableName(s *string) *KothCheckUpdate {
	if s != nil {
		kcu.SetName(*s)
	}
	return kcu
}

// SetFile sets the "file" field.
func (kcu *KothCheckUpdate) SetFile(s string) *KothCheckUpdate {
	kcu.mutation.SetFile(s)
	return kcu
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (kcu *KothCheckUpdate) SetNillableFile(s *string) *KothCheckUpdate {
	if s != nil {
		kcu.SetFile(*s)
	}
	return kcu
}

// SetHost sets the "host" field.
func (kcu *KothCheckUpdate) SetHost(s string) *KothCheckUpdate {
	kcu.mutation.SetHost(s)
	return kcu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (kcu *KothCheckUpdate) SetNillableHost(s *string) *KothCheckUpdate {
	if s != nil {
		kcu.SetHost(*s)
	}
	return kcu
}

// SetTopic sets the "topic" field.
func (kcu *KothCheckUpdate) SetTopic(s string) *KothCheckUpdate {
	kcu.mutation.SetTopic(s)
	return kcu
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (kcu *KothCheckUpdate) SetNillableTopic(s *string) *KothCheckUpdate {
	if s != nil {
		kcu.SetTopic(*s)
	}
	return kcu
}

// SetWeight sets the "weight" field.
func (kcu *KothCheckUpdate) SetWeight(i int) *KothCheckUpdate {
	kcu.mutation.ResetWeight()
	kcu.mutation.SetWeight(i)
	return kcu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (kcu *KothCheckUpdate) SetNillableWeight(i *int) *KothCheckUpdate {
	if i != nil {
		kcu.SetWeight(*i)
	}
	return kcu
}

// AddWeight adds i to the "weight" field.
func (kcu *KothCheckUpdate) AddWeight(i int) *KothCheckUpdate {
	kcu.mutation.AddWeight(i)
	return kcu
}

// AddStatusIDs adds the "statuses" edge to the KothStatus entity by IDs.
func (kcu *KothCheckUpdate) AddStatusIDs(ids ...uuid.UUID) *KothCheckUpdate {
	kcu.mutation.AddStatusIDs(ids...)
	return kcu
}

// AddStatuses adds the "statuses" edges to the KothStatus entity.
func (kcu *KothCheckUpdate) AddStatuses(k ...*KothStatus) *KothCheckUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.AddStatusIDs(ids...)
}

// Mutation returns the KothCheckMutation object of the builder.
func (kcu *KothCheckUpdate) Mutation() *KothCheckMutation {
	return kcu.mutation
}

// ClearStatuses clears all "statuses" edges to the KothStatus entity.
func (kcu *KothCheckUpdate) ClearStatuses() *KothCheckUpdate {
	kcu.mutation.ClearStatuses()
	return kcu
}

// RemoveStatusIDs removes the "statuses" edge to KothStatus entities by IDs.
func (kcu *KothCheckUpdate) RemoveStatusIDs(ids ...uuid.UUID) *KothCheckUpdate {
	kcu.mutation.RemoveStatusIDs(ids...)
	return kcu
}

// RemoveStatuses removes "statuses" edges to KothStatus entities.
func (kcu *KothCheckUpdate) RemoveStatuses(k ...*KothStatus) *KothCheckUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.RemoveStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *KothCheckUpdate) Save(ctx context.Context) (int, error) {
	kcu.defaults()
	return withHooks(ctx, kcu.sqlSave, kcu.mutation, kcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *KothCheckUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *KothCheckUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *KothCheckUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *KothCheckUpdate) defaults() {
	if _, ok := kcu.mutation.UpdateTime(); !ok {
		v := kothcheck.UpdateDefaultUpdateTime()
		kcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcu *KothCheckUpdate) check() error {
	if v, ok := kcu.mutation.Name(); ok {
		if err := kothcheck.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "KothCheck.name": %w`, err)}
		}
	}
	if v, ok := kcu.mutation.File(); ok {
		if err := kothcheck.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "KothCheck.file": %w`, err)}
		}
	}
	if v, ok := kcu.mutation.Host(); ok {
		if err := kothcheck.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "KothCheck.host": %w`, err)}
		}
	}
	if v, ok := kcu.mutation.Topic(); ok {
		if err := kothcheck.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "KothCheck.topic": %w`, err)}
		}
	}
	if v, ok := kcu.mutation.Weight(); ok {
		if err := kothcheck.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "KothCheck.weight": %w`, err)}
		}
	}
	return nil
}

func (kcu *KothCheckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := kcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(kothcheck.Table, kothcheck.Columns, sqlgraph.NewFieldSpec(kothcheck.FieldID, field.TypeUUID))
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.UpdateTime(); ok {
		_spec.SetField(kothcheck.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := kcu.mutation.Name(); ok {
		_spec.SetField(kothcheck.FieldName, field.TypeString, value)
	}
	if value, ok := kcu.mutation.File(); ok {
		_spec.SetField(kothcheck.FieldFile, field.TypeString, value)
	}
	if value, ok := kcu.mutation.Host(); ok {
		_spec.SetField(kothcheck.FieldHost, field.TypeString, value)
	}
	if value, ok := kcu.mutation.Topic(); ok {
		_spec.SetField(kothcheck.FieldTopic, field.TypeString, value)
	}
	if value, ok := kcu.mutation.Weight(); ok {
		_spec.SetField(kothcheck.FieldWeight, field.TypeInt, value)
	}
	if value, ok := kcu.mutation.AddedWeight(); ok {
		_spec.AddField(kothcheck.FieldWeight, field.TypeInt, value)
	}
	if kcu.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !kcu.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kothcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kcu.mutation.done = true
	return n, nil
}

// KothCheckUpdateOne is the builder for updating a single KothCheck entity.
type KothCheckUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KothCheckMutation
}

// SetUpdateTime sets the "update_time" field.
func (kcuo *KothCheckUpdateOne) SetUpdateTime(t time.Time) *KothCheckUpdateOne {
	kcuo.mutation.SetUpdateTime(t)
	return kcuo
}

// SetName sets the "name" field.
func (kcuo *KothCheckUpdateOne) SetName(s string) *KothCheckUpdateOne {
	kcuo.mutation.SetName(s)
	return kcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kcuo *KothCheckUpdateOne) SetNillableName(s *string) *KothCheckUpdateOne {
	if s != nil {
		kcuo.SetName(*s)
	}
	return kcuo
}

// SetFile sets the "file" field.
func (kcuo *KothCheckUpdateOne) SetFile(s string) *KothCheckUpdateOne {
	kcuo.mutation.SetFile(s)
	return kcuo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (kcuo *KothCheckUpdateOne) SetNillableFile(s *string) *KothCheckUpdateOne {
	if s != nil {
		kcuo.SetFile(*s)
	}
	return kcuo
}

// SetHost sets the "host" field.
func (kcuo *KothCheckUpdateOne) SetHost(s string) *KothCheckUpdateOne {
	kcuo.mutation.SetHost(s)
	return kcuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (kcuo *KothCheckUpdateOne) SetNillableHost(s *string) *KothCheckUpdateOne {
	if s != nil {
		kcuo.SetHost(*s)
	}
	return kcuo
}

// SetTopic sets the "topic" field.
func (kcuo *KothCheckUpdateOne) SetTopic(s string) *KothCheckUpdateOne {
	kcuo.mutation.SetTopic(s)
	return kcuo
}

// SetNillableTopic sets the "topic" field if the given value is not nil.
func (kcuo *KothCheckUpdateOne) SetNillableTopic(s *string) *KothCheckUpdateOne {
	if s != nil {
		kcuo.SetTopic(*s)
	}
	return kcuo
}

// SetWeight sets the "weight" field.
func (kcuo *KothCheckUpdateOne) SetWeight(i int) *KothCheckUpdateOne {
	kcuo.mutation.ResetWeight()
	kcuo.mutation.SetWeight(i)
	return kcuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (kcuo *KothCheckUpdateOne) SetNillableWeight(i *int) *KothCheckUpdateOne {
	if i != nil {
		kcuo.SetWeight(*i)
	}
	return kcuo
}

// AddWeight adds i to the "weight" field.
func (kcuo *KothCheckUpdateOne) AddWeight(i int) *KothCheckUpdateOne {
	kcuo.mutation.AddWeight(i)
	return kcuo
}

// AddStatusIDs adds the "statuses" edge to the KothStatus entity by IDs.
func (kcuo *KothCheckUpdateOne) AddStatusIDs(ids ...uuid.UUID) *KothCheckUpdateOne {
	kcuo.mutation.AddStatusIDs(ids...)
	return kcuo
}

// AddStatuses adds the "statuses" edges to the KothStatus entity.
func (kcuo *KothCheckUpdateOne) AddStatuses(k ...*KothStatus) *KothCheckUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.AddStatusIDs(ids...)
}

// Mutation returns the KothCheckMutation object of the builder.
func (kcuo *KothCheckUpdateOne) Mutation() *KothCheckMutation {
	return kcuo.mutation
}

// ClearStatuses clears all "statuses" edges to the KothStatus entity.
func (kcuo *KothCheckUpdateOne) ClearStatuses() *KothCheckUpdateOne {
	kcuo.mutation.ClearStatuses()
	return kcuo
}

// RemoveStatusIDs removes the "statuses" edge to KothStatus entities by IDs.
func (kcuo *KothCheckUpdateOne) RemoveStatusIDs(ids ...uuid.UUID) *KothCheckUpdateOne {
	kcuo.mutation.RemoveStatusIDs(ids...)
	return kcuo
}

// RemoveStatuses removes "statuses" edges to KothStatus entities.
func (kcuo *KothCheckUpdateOne) RemoveStatuses(k ...*KothStatus) *KothCheckUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.RemoveStatusIDs(ids...)
}

// Where appends a list predicates to the KothCheckUpdate builder.
func (kcuo *KothCheckUpdateOne) Where(ps ...predicate.KothCheck) *KothCheckUpdateOne {
	kcuo.mutation.Where(ps...)
	return kcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kcuo *KothCheckUpdateOne) Select(field string, fields ...string) *KothCheckUpdateOne {
	kcuo.fields = append([]string{field}, fields...)
	return kcuo
}

// Save executes the query and returns the updated KothCheck entity.
func (kcuo *KothCheckUpdateOne) Save(ctx context.Context) (*KothCheck, error) {
	kcuo.defaults()
	return withHooks(ctx, kcuo.sqlSave, kcuo.mutation, kcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *KothCheckUpdateOne) SaveX(ctx context.Context) *KothCheck {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *KothCheckUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *KothCheckUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *KothCheckUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdateTime(); !ok {
		v := kothcheck.UpdateDefaultUpdateTime()
		kcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcuo *KothCheckUpdateOne) check() error {
	if v, ok := kcuo.mutation.Name(); ok {
		if err := kothcheck.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "KothCheck.name": %w`, err)}
		}
	}
	if v, ok := kcuo.mutation.File(); ok {
		if err := kothcheck.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "KothCheck.file": %w`, err)}
		}
	}
	if v, ok := kcuo.mutation.Host(); ok {
		if err := kothcheck.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "KothCheck.host": %w`, err)}
		}
	}
	if v, ok := kcuo.mutation.Topic(); ok {
		if err := kothcheck.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "KothCheck.topic": %w`, err)}
		}
	}
	if v, ok := kcuo.mutation.Weight(); ok {
		if err := kothcheck.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "KothCheck.weight": %w`, err)}
		}
	}
	return nil
}

func (kcuo *KothCheckUpdateOne) sqlSave(ctx context.Context) (_node *KothCheck, err error) {
	if err := kcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(kothcheck.Table, kothcheck.Columns, sqlgraph.NewFieldSpec(kothcheck.FieldID, field.TypeUUID))
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KothCheck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kothcheck.FieldID)
		for _, f := range fields {
			if !kothcheck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kothcheck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcuo.mutation.UpdateTime(); ok {
		_spec.SetField(kothcheck.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := kcuo.mutation.Name(); ok {
		_spec.SetField(kothcheck.FieldName, field.TypeString, value)
	}
	if value, ok := kcuo.mutation.File(); ok {
		_spec.SetField(kothcheck.FieldFile, field.TypeString, value)
	}
	if value, ok := kcuo.mutation.Host(); ok {
		_spec.SetField(kothcheck.FieldHost, field.TypeString, value)
	}
	if value, ok := kcuo.mutation.Topic(); ok {
		_spec.SetField(kothcheck.FieldTopic, field.TypeString, value)
	}
	if value, ok := kcuo.mutation.Weight(); ok {
		_spec.SetField(kothcheck.FieldWeight, field.TypeInt, value)
	}
	if value, ok := kcuo.mutation.AddedWeight(); ok {
		_spec.AddField(kothcheck.FieldWeight, field.TypeInt, value)
	}
	if kcuo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedStatusesIDs(); len(nodes) > 0 && !kcuo.mutation.StatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kothcheck.StatusesTable,
			Columns: []string{kothcheck.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(kothstatus.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KothCheck{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kothcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kcuo.mutation.done = true
	return _node, nil
}
