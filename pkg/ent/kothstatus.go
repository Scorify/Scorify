// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/kothcheck"
	"github.com/scorify/scorify/pkg/ent/kothstatus"
	"github.com/scorify/scorify/pkg/ent/minion"
	"github.com/scorify/scorify/pkg/ent/round"
	"github.com/scorify/scorify/pkg/ent/user"
)

// KothStatus is the model entity for the KothStatus schema.
type KothStatus struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of a koth status
	ID uuid.UUID `json:"id"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The uuid of a user
	UserID uuid.UUID `json:"user_id"`
	// The uuid of a round
	RoundID uuid.UUID `json:"round_id"`
	// The uuid of a minion
	MinionID uuid.UUID `json:"minion_id"`
	// The uuid of a check
	CheckID uuid.UUID `json:"check_id"`
	// The points of a koth status
	Points int `json:"points"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KothStatusQuery when eager-loading is set.
	Edges        KothStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KothStatusEdges holds the relations/edges for other nodes in the graph.
type KothStatusEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Round holds the value of the round edge.
	Round *Round `json:"round,omitempty"`
	// Minion holds the value of the minion edge.
	Minion *Minion `json:"minion,omitempty"`
	// Check holds the value of the check edge.
	Check *KothCheck `json:"check,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KothStatusEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoundOrErr returns the Round value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KothStatusEdges) RoundOrErr() (*Round, error) {
	if e.Round != nil {
		return e.Round, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: round.Label}
	}
	return nil, &NotLoadedError{edge: "round"}
}

// MinionOrErr returns the Minion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KothStatusEdges) MinionOrErr() (*Minion, error) {
	if e.Minion != nil {
		return e.Minion, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: minion.Label}
	}
	return nil, &NotLoadedError{edge: "minion"}
}

// CheckOrErr returns the Check value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KothStatusEdges) CheckOrErr() (*KothCheck, error) {
	if e.Check != nil {
		return e.Check, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: kothcheck.Label}
	}
	return nil, &NotLoadedError{edge: "check"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KothStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kothstatus.FieldPoints:
			values[i] = new(sql.NullInt64)
		case kothstatus.FieldCreateTime, kothstatus.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case kothstatus.FieldID, kothstatus.FieldUserID, kothstatus.FieldRoundID, kothstatus.FieldMinionID, kothstatus.FieldCheckID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KothStatus fields.
func (ks *KothStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kothstatus.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ks.ID = *value
			}
		case kothstatus.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ks.CreateTime = value.Time
			}
		case kothstatus.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ks.UpdateTime = value.Time
			}
		case kothstatus.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ks.UserID = *value
			}
		case kothstatus.FieldRoundID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[i])
			} else if value != nil {
				ks.RoundID = *value
			}
		case kothstatus.FieldMinionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field minion_id", values[i])
			} else if value != nil {
				ks.MinionID = *value
			}
		case kothstatus.FieldCheckID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field check_id", values[i])
			} else if value != nil {
				ks.CheckID = *value
			}
		case kothstatus.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				ks.Points = int(value.Int64)
			}
		default:
			ks.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KothStatus.
// This includes values selected through modifiers, order, etc.
func (ks *KothStatus) Value(name string) (ent.Value, error) {
	return ks.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the KothStatus entity.
func (ks *KothStatus) QueryUser() *UserQuery {
	return NewKothStatusClient(ks.config).QueryUser(ks)
}

// QueryRound queries the "round" edge of the KothStatus entity.
func (ks *KothStatus) QueryRound() *RoundQuery {
	return NewKothStatusClient(ks.config).QueryRound(ks)
}

// QueryMinion queries the "minion" edge of the KothStatus entity.
func (ks *KothStatus) QueryMinion() *MinionQuery {
	return NewKothStatusClient(ks.config).QueryMinion(ks)
}

// QueryCheck queries the "check" edge of the KothStatus entity.
func (ks *KothStatus) QueryCheck() *KothCheckQuery {
	return NewKothStatusClient(ks.config).QueryCheck(ks)
}

// Update returns a builder for updating this KothStatus.
// Note that you need to call KothStatus.Unwrap() before calling this method if this KothStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ks *KothStatus) Update() *KothStatusUpdateOne {
	return NewKothStatusClient(ks.config).UpdateOne(ks)
}

// Unwrap unwraps the KothStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ks *KothStatus) Unwrap() *KothStatus {
	_tx, ok := ks.config.driver.(*txDriver)
	if !ok {
		panic("ent: KothStatus is not a transactional entity")
	}
	ks.config.driver = _tx.drv
	return ks
}

// String implements the fmt.Stringer.
func (ks *KothStatus) String() string {
	var builder strings.Builder
	builder.WriteString("KothStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ks.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ks.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ks.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ks.UserID))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", ks.RoundID))
	builder.WriteString(", ")
	builder.WriteString("minion_id=")
	builder.WriteString(fmt.Sprintf("%v", ks.MinionID))
	builder.WriteString(", ")
	builder.WriteString("check_id=")
	builder.WriteString(fmt.Sprintf("%v", ks.CheckID))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", ks.Points))
	builder.WriteByte(')')
	return builder.String()
}

// KothStatusSlice is a parsable slice of KothStatus.
type KothStatusSlice []*KothStatus
