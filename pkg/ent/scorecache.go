// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/scorify/scorify/pkg/ent/round"
	"github.com/scorify/scorify/pkg/ent/scorecache"
	"github.com/scorify/scorify/pkg/ent/user"
)

// ScoreCache is the model entity for the ScoreCache schema.
type ScoreCache struct {
	config `json:"-"`
	// ID of the ent.
	// The uuid of a score cache
	ID uuid.UUID `json:"id"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// The points of the round
	Points int `json:"points"`
	// The uuid of a round
	RoundID uuid.UUID `json:"round_id"`
	// The uuid of a user
	UserID uuid.UUID `json:"user_id"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScoreCacheQuery when eager-loading is set.
	Edges        ScoreCacheEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScoreCacheEdges holds the relations/edges for other nodes in the graph.
type ScoreCacheEdges struct {
	// The round of a score cache
	Round *Round `json:"round"`
	// The user of a score cache
	User *User `json:"user"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoundOrErr returns the Round value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoreCacheEdges) RoundOrErr() (*Round, error) {
	if e.Round != nil {
		return e.Round, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: round.Label}
	}
	return nil, &NotLoadedError{edge: "round"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoreCacheEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScoreCache) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scorecache.FieldPoints:
			values[i] = new(sql.NullInt64)
		case scorecache.FieldCreateTime, scorecache.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case scorecache.FieldID, scorecache.FieldRoundID, scorecache.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScoreCache fields.
func (sc *ScoreCache) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scorecache.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sc.ID = *value
			}
		case scorecache.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sc.CreateTime = value.Time
			}
		case scorecache.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sc.UpdateTime = value.Time
			}
		case scorecache.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				sc.Points = int(value.Int64)
			}
		case scorecache.FieldRoundID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field round_id", values[i])
			} else if value != nil {
				sc.RoundID = *value
			}
		case scorecache.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				sc.UserID = *value
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScoreCache.
// This includes values selected through modifiers, order, etc.
func (sc *ScoreCache) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryRound queries the "round" edge of the ScoreCache entity.
func (sc *ScoreCache) QueryRound() *RoundQuery {
	return NewScoreCacheClient(sc.config).QueryRound(sc)
}

// QueryUser queries the "user" edge of the ScoreCache entity.
func (sc *ScoreCache) QueryUser() *UserQuery {
	return NewScoreCacheClient(sc.config).QueryUser(sc)
}

// Update returns a builder for updating this ScoreCache.
// Note that you need to call ScoreCache.Unwrap() before calling this method if this ScoreCache
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ScoreCache) Update() *ScoreCacheUpdateOne {
	return NewScoreCacheClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ScoreCache entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ScoreCache) Unwrap() *ScoreCache {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScoreCache is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ScoreCache) String() string {
	var builder strings.Builder
	builder.WriteString("ScoreCache(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", sc.Points))
	builder.WriteString(", ")
	builder.WriteString("round_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.RoundID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// ScoreCaches is a parsable slice of ScoreCache.
type ScoreCaches []*ScoreCache
